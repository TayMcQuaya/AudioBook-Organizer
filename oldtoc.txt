APP.HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AudioBook Organizer</title>
    
    <!-- Favicons -->
    <link rel="icon" href="/public/icons/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/png" sizes="16x16" href="/public/icons/favicon-16x16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/public/icons/favicon-32x32.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/public/icons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/public/icons/android-chrome-192x192.png">
    <link rel="icon" type="image/png" sizes="512x512" href="/public/icons/android-chrome-512x512.png">
    
    <!-- CSS Files -->
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/components.css">
    <link rel="stylesheet" href="/css/themes.css">
    <link rel="stylesheet" href="/css/landing.css">
    <link rel="stylesheet" href="/css/formatting.css">
</head>
<body class="app-body">
    <!-- App Navigation Header -->
    <nav class="app-nav">
        <div class="nav-container">
            <div class="nav-brand">
                <a href="/" class="brand-link landing-nav-link" data-link>
                    <span class="brand-icon">üéß</span>
                    AudioBook Organizer
                </a>
            </div>
            <div class="nav-links">
                <!-- Theme toggle button -->
                <button class="theme-toggle-btn" onclick="toggleTheme()" title="Toggle Dark/Light Mode">
                    <span class="theme-icon">üåô</span>
                </button>
                <!-- User navigation will be inserted here by appUI.js -->
                <a href="/auth" class="btn btn-primary auth-btn auth-nav-link">Sign In</a>
            </div>
        </div>
    </nav>

    <div class="main-container">
        <!-- Left Column - Book Content -->
        <div class="column">
            <div class="column-header">
                <div class="column-title-container">
                    <a href="/" class="back-arrow landing-nav-link" title="Back to Landing Page" data-link>‚Äπ</a>
                    <h2>üìö Book Content</h2>
                </div>
                <div class="header-controls">
                    <div class="file-upload">
                        <input type="file" id="bookFile" accept=".txt,.docx">
                        <button onclick="uploadBook()">Upload Book</button>
                    </div>
                    <!-- Smart Select Button -->
                    <div class="smart-select-controls">
                        <div class="smart-select-row">
                            <input type="number" id="smartSelectChars" value="3000" min="100" max="10000" placeholder="3000" title="Number of characters to select">
                            <label for="smartSelectChars">chars</label>
                            <button id="smartSelectBtn" onclick="smartSelect()" disabled>
                                <i>üéØ</i> Smart Select
                            </button>
                        </div>
                        <div class="smart-select-row">
                            <button id="toggleEditBtn" onclick="toggleEditMode()" class="edit-toggle-btn">
                                <i>üëÅ</i> <span id="editModeText">View Mode</span>
                            </button>
                            <button id="resetSmartSelectBtn" onclick="resetSmartSelectPosition()" class="reset-btn">
                                <i>üîÑ</i> Reset
                            </button>
                        </div>
                    </div>
                </div>
                <div id="loadingIndicator" class="loading" style="display: none;">Loading book content...</div>
                <div id="errorMessage" class="error-message" style="display: none;"></div>
            </div>
            <div class="column-content">
                <div id="bookContent" class="book-content" contenteditable="true" spellcheck="false" tabindex="0"></div>
            </div>
        </div>

        <!-- Right Column - Sections -->
        <div class="column">
            <div class="column-header">
                <h2>üìù Book Sections</h2>
                <div class="header-controls">
                    <button onclick="createNewChapter()" class="create-chapter-btn">
                        <i>üìö</i> New Chapter
                    </button>
                    <button onclick="showReorderModal()" class="reorder-btn">
                        <i>‚ÜïÔ∏è</i> Reorder
                    </button>
                    <button onclick="saveProgress()" class="save-btn">
                        <i>üíæ</i> Save
                    </button>
                    <input type="file" id="loadFile" accept=".json" style="display: none;" onchange="loadProgress(this)">
                    <button onclick="document.getElementById('loadFile').click()" class="load-btn">
                        <i>üìÇ</i> Load
                    </button>
                    <button onclick="showExportModal()" class="export-btn">
                        <i>üì§</i> Export
                    </button>
                </div>
            </div>
            <div class="column-content">
                <div id="sectionsList" class="sections-list"></div>
            </div>
        </div>
    </div>

    <!-- Selection Tools -->
    <div id="selection-tools">
        <div class="selection-tools-content">
            <div class="selection-info">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span>Selected text (<span id="selectionLength">0</span> characters)</span>
                    <div class="next-color-preview">
                        Next color: <div id="nextColorDot" class="color-preview-dot"></div>
                    </div>
                </div>
            </div>
            <div class="selection-preview" id="selectionPreview"></div>
            <button class="create-section-btn" onclick="createSection()">
                <i>‚ûï</i> Create Section
            </button>
        </div>
    </div>

    <!-- Export Modal -->
    <div id="exportModal" class="modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h2>Export Options</h2>
                <button class="modal-close" onclick="hideExportModal()">√ó</button>
            </div>
            <div class="modal-body">
                <div class="export-options">
                    <label>
                        <input type="checkbox" id="exportMetadata" checked>
                        <span class="option-icon">üìã</span>
                        Export metadata (sections, chapters, highlights)
                    </label>
                    <label>
                        <input type="checkbox" id="exportAudio" checked>
                        <span class="option-icon">üéµ</span>
                        Export audio files
                    </label>
                    <label>
                        <input type="checkbox" id="exportBookContent" checked>
                        <span class="option-icon">üìñ</span>
                        Export book content with highlights
                    </label>
                    <label>
                        <input type="checkbox" id="mergeAudio">
                        <span class="option-icon">üîó</span>
                        Merge audio files
                    </label>
                    <div class="audio-format-selection" style="margin-left: 20px;">
                        <label style="font-weight: bold; display: block; margin-bottom: 8px;">
                            Audio Format:
                        </label>
                        <label style="display: block; margin-bottom: 4px;">
                            <input type="radio" name="audioFormat" value="wav" checked>
                            WAV (uncompressed, larger files)
                        </label>
                        <label style="display: block; margin-bottom: 8px;">
                            <input type="radio" name="audioFormat" value="mp3">
                            MP3 (compressed, smaller files)
                        </label>
                    </div>
                    <div class="silence-duration" style="margin-left: 20px;">
                        <label>
                            Silence between sections (seconds):
                            <input type="number" id="silenceDuration" value="2" min="0" max="10">
                        </label>
                    </div>
                </div>
                
                <!-- Dynamic Download Preview Section -->
                <div class="download-preview" id="downloadPreview">
                    <div class="preview-header">
                        <span>üì¶</span>
                        Download Preview:
                    </div>
                    <div id="previewContent">
                        Will download "audiobook_export.zip" containing multiple files
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div id="status" style="display: none;"></div>
                <button onclick="startExport()">Export</button>
            </div>
        </div>
    </div>

    <!-- Reorder Modal -->
    <div id="reorderModal" class="modal-overlay">
        <div class="modal reorder-modal">
            <div class="modal-header">
                <h2>‚ÜïÔ∏è Reorder Chapters & Sections</h2>
                <button class="modal-close" onclick="hideReorderModal()">√ó</button>
            </div>
            <div class="modal-body">
                <div class="reorder-instructions">
                    <p><i>üìö</i> Drag chapters to reorder them</p>
                    <p><i>üìù</i> Click on a chapter's dropdown to reorder its sections</p>
                    <p><i>‚úèÔ∏è</i> Double-click on chapter or section names to edit them</p>
                </div>
                <div id="reorderChaptersList" class="reorder-chapters-list">
                    <!-- Chapter reorder items will be populated here -->
                </div>
            </div>
            <div class="modal-footer">
                <button onclick="applyReorderChanges()" class="btn-primary">Apply Changes</button>
                <button onclick="cancelReorderChanges()" class="btn-secondary">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Selection Guide -->
    <div id="selectionGuide" class="selection-guide">
        <div class="guide-step">
            <i>üëÜ</i>
            <span>Click and drag to select text</span>
        </div>
        <div class="guide-step">
            <i>‚ú®</i>
            <span>Release to see options</span>
        </div>
        <div class="guide-step">
            <i>‚ûï</i>
            <span>Click "Create Section" to save</span>
        </div>
    </div>

    <!-- Character Counter -->
    <div class="char-counter">
        <span id="charCount">0</span> characters
    </div>

    <!-- JavaScript Files -->
    <script type="module" src="/js/main.js"></script>
</body>
</html> 


--------------------------------------------------------------

APPINITIALIZATION.js:

// AudioBook Organizer - App Initialization Module

import { chapters } from './state.js';
import { createNewChapter } from './chapters.js';
import { navigateToSection } from './sections.js';
import { updateSelectionColor, initializeModalHandlers } from './ui.js';
import { initializeTextSelection } from './textSelection.js';
import { initializeEditProtection } from './editMode.js';
import { sessionManager } from './sessionManager.js';
import appUI from './appUI.js';
import themeManager from './themeManager.js';
import { loadFromDatabase, startAutoSave, stopAutoSave } from './storage.js';
import { initializeTableOfContents, cleanupTableOfContents } from './tableOfContents.js';
import { tempAuthManager } from './tempAuth.js';

let isInitialized = false;

/**
 * Cleanup function for the application
 */
export function cleanupApp() {
    if (!isInitialized) return;
    console.log('üßπ Cleaning up application resources...');

    // Stop auto-save functionality
    stopAutoSave();

    // Clean up Table of Contents
    cleanupTableOfContents();

    // Clean up text selection listeners
    if (window.cleanupTextSelection) {
        window.cleanupTextSelection();
        console.log('...text selection cleaned up.');
    }

    // Clean up UI elements like user navigation
    if (window.appUI) {
        window.appUI.removeUserNavigation();
        console.log('...user navigation removed.');
    }
    
    // You could add more cleanup here, e.g., removing other listeners
    
    isInitialized = false;
    window.isAppInitialized = false;
    console.log('‚úÖ Application cleanup complete.');
}

// Show selection guide overlay for first-time users
function showSelectionGuide() {
    if (!localStorage.getItem('selectionGuideShown')) {
        const selectionGuide = document.getElementById('selectionGuide');
        if (selectionGuide) {
            selectionGuide.style.display = 'block';
            localStorage.setItem('selectionGuideShown', 'true');
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                selectionGuide.style.display = 'none';
            }, 5000);
            
            console.log('Selection guide shown to first-time user');
        }
    }
}

// Handle direct links to sections via URL hash
function handleHashNavigation() {
    if (window.location.hash) {
        const sectionId = window.location.hash.replace('#section-', '');
        if (sectionId) {
            // Delay navigation to ensure DOM is ready
            setTimeout(() => {
                navigateToSection(sectionId);
                console.log(`Navigating to section: ${sectionId}`);
            }, 500);
        }
    }
}

// Initialize default state if needed
function initializeDefaultState() {
    // Update selection color indicator
    updateSelectionColor();
    
    // Don't create any default chapters - start with clean state
    console.log('Application initialized with clean state');
}

// Restore latest project from database
async function restoreLatestProject() {
    try {
        console.log('üîÑ Attempting to restore latest project...');
        
        // Check authentication based on mode
        let isAuthenticated = false;
        if (tempAuthManager.isTestingMode) {
            // In testing mode, check temp auth
            isAuthenticated = tempAuthManager.isAuthenticated;
            console.log('Testing mode - auth status:', isAuthenticated);
        } else {
            // In normal mode, check Supabase auth
            isAuthenticated = window.authModule?.isAuthenticated();
            console.log('Normal mode - auth status:', isAuthenticated);
        }
        
        if (!isAuthenticated) {
            console.log('üë§ User not authenticated, skipping project restoration');
            return false;
        }
        
        // Check if we already have content (avoid overwriting user's current work)
        if (chapters.length > 0 || document.getElementById('bookContent')?.textContent?.trim()) {
            console.log('üìù Current project exists, skipping auto-restoration');
            return false;
        }
        
        // Show loading indicator
        const loadingMessage = tempAuthManager.isTestingMode ? 
            'Restoring your work...' : 
            'Restoring your project...';
        showLoadingIndicator(loadingMessage);
        
        // Try to restore from appropriate storage
        const restored = await loadFromDatabase();
        
        // Hide loading indicator
        hideLoadingIndicator();
        
        if (restored) {
            const storageType = tempAuthManager.isTestingMode ? 'browser storage' : 'database';
            console.log(`‚úÖ Project restored successfully from ${storageType}`);
            return true;
        } else {
            console.log('üì≠ No previous project found, starting fresh');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Error during project restoration:', error);
        hideLoadingIndicator();
        return false;
    }
}

// Show loading indicator
function showLoadingIndicator(message = 'Loading...') {
    // Create or update loading indicator
    let loadingEl = document.getElementById('app-loading-indicator');
    if (!loadingEl) {
        loadingEl = document.createElement('div');
        loadingEl.id = 'app-loading-indicator';
        loadingEl.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 20px 30px;
            border-radius: 8px;
            z-index: 10000;
            font-family: system-ui, sans-serif;
            display: flex;
            align-items: center;
            gap: 15px;
        `;
        
        loadingEl.innerHTML = `
            <div style="
                width: 20px;
                height: 20px;
                border: 2px solid rgba(255,255,255,0.3);
                border-top: 2px solid white;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            "></div>
            <span id="loading-message">${message}</span>
        `;
        
        // Add CSS animation
        if (!document.getElementById('loading-spinner-styles')) {
            const style = document.createElement('style');
            style.id = 'loading-spinner-styles';
            style.textContent = `
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(loadingEl);
    } else {
        document.getElementById('loading-message').textContent = message;
        loadingEl.style.display = 'flex';
    }
}

// Hide loading indicator
function hideLoadingIndicator() {
    const loadingEl = document.getElementById('app-loading-indicator');
    if (loadingEl) {
        loadingEl.style.display = 'none';
    }
}

// Initialize all modules in correct order
async function initializeModules() {
    // Initialize temporary auth manager first (for testing mode)
    await tempAuthManager.init();
    
    // Make tempAuthManager globally accessible for storage module
    window.tempAuthManager = tempAuthManager;
    
    // Initialize theme manager
    themeManager.init();
    
    // Initialize session management
    await sessionManager.init();
    
    // Initialize UI manager after session manager
    await appUI.init();
    
    // Initialize UI handlers
    initializeModalHandlers();
    
    // Initialize text interaction
    initializeTextSelection();
    
    // Initialize edit mode protection
    initializeEditProtection();
    
    console.log('All modules initialized');
}

// Main application initialization
export async function initApp() {
    // Prevent double initialization
    if (isInitialized) {
        console.log('App already initialized. Skipping.');
        return;
    }
    
    console.log('üì± AudioBook Organizer - Initializing application...');
    
    try {
        // Initialize default state
        initializeDefaultState();
        
        // Show selection guide for new users
        showSelectionGuide();
        
        // Initialize all modules
        await initializeModules();
        
        // Try to restore latest project from database
        await restoreLatestProject();
        
        // Initialize Table of Contents
        initializeTableOfContents();
        
        // Start auto-save functionality
        startAutoSave();
        
        // Handle URL hash navigation
        handleHashNavigation();
        
        // Mark as initialized
        isInitialized = true;
        window.isAppInitialized = true;
        console.log('‚úÖ AudioBook Organizer - Application ready!');
        
    } catch (error) {
        console.error('‚ùå Error during app initialization:', error);
        isInitialized = false;
        window.isAppInitialized = false;
    }
}

// Get initialization status (useful for debugging)
export function getInitializationStatus() {
    return {
        isInitialized,
        windowFlag: window.isAppInitialized,
        selectionGuideShown: localStorage.getItem('selectionGuideShown') === 'true',
        chaptersCount: chapters.length,
        isAuthenticated: sessionManager.isAuthenticated,
        timestamp: new Date().toISOString()
    };
} 

----------------------------------------------------------

table-of-contents-css:

/* Table of Contents Sidebar Styles */

/* ===============================================
   TOC Overlay Design (No Layout Disruption)
   =============================================== */

/* TOC as overlay - does not affect existing layout */
.toc-sidebar {
    position: fixed;
    top: 60px; /* Below navigation */
    left: -320px; /* Hidden by default */
    bottom: 0;
    width: 320px;
    z-index: 1001; /* Above backdrop */
    transition: left 0.3s var(--animation-ease);
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.2);
}

.toc-sidebar.toc-open {
    left: 0; /* Slide in from left */
}

/* Backdrop removed - using click-outside detection instead */

/* ===============================================
   TOC Sidebar Structure
   =============================================== */

.toc-sidebar {
    background: var(--bg-primary);
    border-right: 1px solid var(--border-color);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: all 0.3s var(--animation-ease);
    z-index: 10;
}

.toc-header {
    padding: var(--spacing-md);
    border-bottom: 1px solid var(--border-color);
    background: var(--bg-secondary);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
}

.toc-header h3 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.toc-close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--text-muted);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: var(--radius-sm);
    transition: all 0.2s ease;
    line-height: 1;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
}

.toc-close-btn:hover {
    background: rgba(var(--primary-color-rgb), 0.1);
    color: var(--primary-color);
    transform: scale(1.1);
}

.toc-content {
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
}

.toc-footer {
    padding: var(--spacing-sm) var(--spacing-md);
    border-top: 1px solid var(--border-color);
    background: var(--bg-secondary);
    flex-shrink: 0;
}

.toc-count {
    color: var(--text-muted);
    font-size: 0.85rem;
}

/* ===============================================
   TOC List Items
   =============================================== */

.toc-list {
    padding: 0;
    margin: 0;
}

.toc-item {
    padding: 12px var(--spacing-md);
    border-bottom: 1px solid rgba(var(--primary-color-rgb), 0.05);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    background: var(--bg-primary);
}

.toc-item:hover {
    background: rgba(var(--primary-color-rgb), 0.08);
    border-left: 3px solid rgba(var(--primary-color-rgb), 0.3);
}

.toc-item.active {
    background: rgba(var(--primary-color-rgb), 0.12);
    border-left: 3px solid var(--primary-color);
    font-weight: 500;
}

.toc-item.active::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: var(--primary-color);
    box-shadow: 0 0 8px rgba(var(--primary-color-rgb), 0.4);
}

/* Header level styling */
.toc-item[data-level="1"] {
    font-weight: 600;
    font-size: 1rem;
    color: var(--text-primary);
}

.toc-item[data-level="2"] {
    font-weight: 500;
    font-size: 0.95rem;
    color: var(--text-primary);
    padding-left: calc(var(--spacing-md) + 1rem);
}

.toc-item[data-level="3"] {
    font-weight: 400;
    font-size: 0.9rem;
    color: var(--text-secondary);
    padding-left: calc(var(--spacing-md) + 2rem);
}

.toc-item[data-level="4"] {
    font-weight: 400;
    font-size: 0.85rem;
    color: var(--text-muted);
    padding-left: calc(var(--spacing-md) + 3rem);
}

.toc-item-icon {
    font-size: 0.9rem;
    color: var(--text-muted);
    flex-shrink: 0;
    margin-top: 0.1rem;
}

.toc-item-text {
    flex: 1;
    line-height: 1.4;
    word-wrap: break-word;
    overflow-wrap: break-word;
}

/* ===============================================
   TOC Toggle Button
   =============================================== */

.toc-toggle-btn {
    background: var(--gradient-primary);
    color: white;
    border: none;
    border-radius: var(--radius-sm);
    padding: 0.5rem 0.75rem;
    font-size: 0.85rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: var(--shadow-sm);
}

.toc-toggle-btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
    background: var(--gradient-secondary);
}

.toc-toggle-btn:active {
    transform: translateY(0);
}

.toc-toggle-btn i {
    font-style: normal;
    font-size: 1rem;
}

.toc-toggle-text {
    font-size: 0.85rem;
    font-weight: 500;
}

/* ===============================================
   Scrollbar Styling (matching app theme)
   =============================================== */

.toc-content::-webkit-scrollbar {
    width: 6px;
}

.toc-content::-webkit-scrollbar-track {
    background: var(--bg-secondary);
}

.toc-content::-webkit-scrollbar-thumb {
    background: rgba(var(--primary-color-rgb), 0.3);
    border-radius: 3px;
}

.toc-content::-webkit-scrollbar-thumb:hover {
    background: rgba(var(--primary-color-rgb), 0.5);
}

/* ===============================================
   Empty State
   =============================================== */

.toc-empty {
    padding: 2rem var(--spacing-md);
    text-align: center;
    color: var(--text-muted);
}

.toc-empty-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    opacity: 0.5;
}

.toc-empty-text {
    font-size: 0.9rem;
    line-height: 1.4;
}

/* ===============================================
   Loading State
   =============================================== */

.toc-loading {
    padding: 2rem var(--spacing-md);
    text-align: center;
    color: var(--text-muted);
}

.toc-loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(var(--primary-color-rgb), 0.2);
    border-top: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 0.5rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* ===============================================
   Dark Theme Overrides
   =============================================== */

[data-theme="dark"] .toc-sidebar {
    border-right-color: var(--border-color);
}

[data-theme="dark"] .toc-item:hover {
    background: rgba(var(--primary-color-rgb), 0.15);
}

[data-theme="dark"] .toc-item.active {
    background: rgba(var(--primary-color-rgb), 0.2);
}

[data-theme="dark"] .toc-close-btn:hover {
    background: rgba(var(--primary-color-rgb), 0.2);
}

/* ===============================================
   Responsive Design
   =============================================== */

/* Tablet */
@media (max-width: 1024px) {
    .main-container.toc-open {
        --toc-width: 260px;
    }
    
    .toc-item {
        padding: 10px var(--spacing-sm);
    }
    
    .toc-header {
        padding: var(--spacing-sm);
    }
}

/* Mobile */
@media (max-width: 768px) {
    .toc-sidebar {
        width: 280px;
    }
    
    .toc-toggle-btn {
        padding: 0.4rem 0.6rem;
        font-size: 0.8rem;
    }
    
    .toc-toggle-text {
        display: none;
    }
}

/* Small Mobile */
@media (max-width: 480px) {
    .toc-sidebar.mobile-overlay {
        width: 240px;
    }
    
    .toc-item {
        padding: 8px var(--spacing-sm);
        font-size: 0.85rem;
    }
    
    .toc-item[data-level="2"] {
        padding-left: calc(var(--spacing-sm) + 0.75rem);
    }
    
    .toc-item[data-level="3"] {
        padding-left: calc(var(--spacing-sm) + 1.5rem);
    }
    
    .toc-item[data-level="4"] {
        padding-left: calc(var(--spacing-sm) + 2.25rem);
    }
}

/* ===============================================
   Animation Utilities
   =============================================== */

.toc-item-enter {
    opacity: 0;
    transform: translateY(-10px);
    animation: tocItemEnter 0.3s ease forwards;
}

@keyframes tocItemEnter {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.toc-highlight-pulse {
    animation: tocHighlightPulse 0.6s ease;
}

@keyframes tocHighlightPulse {
    0%, 100% { 
        background: rgba(var(--primary-color-rgb), 0.12);
    }
    50% { 
        background: rgba(var(--primary-color-rgb), 0.25);
        transform: scale(1.02);
    }
}

/* Header Flash Animation (like sections) */
.toc-flash {
    animation: tocFlash 0.6s ease-out;
}

@keyframes tocFlash {
    0% { 
        background-color: rgba(255, 255, 0, 0.4);
        transform: scale(1.02);
    }
    50% { 
        background-color: rgba(255, 255, 0, 0.6);
    }
    100% { 
        background-color: transparent;
        transform: scale(1);
    }
}

/* ===============================================
   Accessibility
   =============================================== */

.toc-item:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: -2px;
    background: rgba(var(--primary-color-rgb), 0.1);
}

.toc-close-btn:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
}

.toc-toggle-btn:focus {
    outline: 2px solid rgba(255, 255, 255, 0.8);
    outline-offset: 2px;
}

/* Reduced motion preferences */
@media (prefers-reduced-motion: reduce) {
    .toc-sidebar,
    .toc-item,
    .toc-close-btn,
    .toc-toggle-btn {
        transition: none;
    }
    
    .toc-item-enter,
    .toc-highlight-pulse {
        animation: none;
    }
    
    .main-container {
        transition: none;
    }
} 

--------------------------------------------------

MAIN.js:

// AudioBook Organizer - Main Application Entry Point

// Import all modules
import { 
    bookText, 
    chapters, 
    currentColorIndex, 
    setBookText, 
    setChapters, 
    setCurrentColorIndex,
    clearChapters,
    getNextColor 
} from './modules/state.js';

import { 
    createNewChapter, 
    updateChapterName, 
    toggleChapter, 
    deleteChapter,
    toggleChapterPlayback,
    seekChapterAudio
} from './modules/chapters.js';

import { 
    createSection, 
    updateSectionName, 
    deleteSection, 
    navigateToSection,
    attachAudio,
    removeAudio,
    copySectionText
} from './modules/sections.js';

import { 
    showExportModal,
    hideExportModal
} from './modules/ui.js';

import { 
    showReorderModal,
    hideReorderModal,
    applyReorderChanges,
    cancelReorderChanges
} from './modules/reorder.js';

import { 
    startExport,
    initializeExportPreview
} from './modules/export.js';

import { 
    saveProgress, 
    loadProgress 
} from './modules/storage.js';

import { 
    performSmartSelect, 
    highlightSmartSelection, 
    resetSmartSelect, 
    initializeSmartSelect 
} from './modules/smartSelect.js';

import { findTextNodeWithContent } from './utils/helpers.js';
import { showSuccess } from './modules/notifications.js';

import { 
    toggleEditMode, 
    initializeEditProtection,
    refreshEditModeState,
    getEditMode 
} from './modules/editMode.js';

import { 
    uploadBook 
} from './modules/bookUpload.js';

import { 
    showSelectionTools, 
    hideSelectionTools, 
    clearTextSelection 
} from './modules/selectionTools.js';

import { initApp, cleanupApp } from './modules/appInitialization.js';

import { 
    cleanupTextSelection 
} from './modules/textSelection.js';

import { 
    initializeFormattingShortcuts,
    initializeSelectionTracking,
    initializeToolbarPositioning
} from './modules/formattingToolbar.js';

import { 
    initializeCommentsSystem
} from './modules/commentsSystem.js';

import testingModeUI from './modules/testingModeUI.js';

// Make functions globally available for HTML onclick handlers
window.createNewChapter = createNewChapter;
window.updateChapterName = updateChapterName;
window.toggleChapter = toggleChapter;
window.deleteChapter = deleteChapter;
window.toggleChapterPlayback = toggleChapterPlayback;
window.seekChapterAudio = seekChapterAudio;
window.createSection = createSection;
window.updateSectionName = updateSectionName;
window.deleteSection = deleteSection;
window.navigateToSection = navigateToSection;
window.attachAudio = attachAudio;
window.removeAudio = removeAudio;
window.copySectionText = copySectionText;
window.showExportModal = showExportModal;
window.hideExportModal = hideExportModal;
window.startExport = startExport;
window.showReorderModal = showReorderModal;
window.hideReorderModal = hideReorderModal;
window.applyReorderChanges = applyReorderChanges;
window.cancelReorderChanges = cancelReorderChanges;
window.saveProgress = saveProgress;
window.loadProgress = loadProgress;
window.uploadBook = uploadBook;
window.smartSelect = smartSelect;
window.resetSmartSelectPosition = resetSmartSelectPosition;
window.toggleEditMode = toggleEditMode;
window.refreshEditModeState = refreshEditModeState;
window.getEditMode = getEditMode;
window.cleanupTextSelection = cleanupTextSelection;

// Enhanced showExportModal that initializes preview
window.showExportModal = function() {
    showExportModal();
    // Initialize preview after modal is shown
    setTimeout(() => {
        initializeExportPreview();
    }, 100);
};

// DEBUGGING: Add formatting diagnostics to global scope
window.debugFormatting = function() {
    import('./modules/formattingState.js').then(({ runFormattingSystemDiagnostics }) => {
        runFormattingSystemDiagnostics();
    }).catch(error => {
        console.error('Could not load formatting diagnostics:', error);
    });
};

// DEBUGGING: Quick test function
window.testFormatting = function() {
    console.log('üß™ QUICK FORMATTING TEST:');
    
    // Check if we're in edit mode
    if (!getEditMode()) {
        console.log('   - Not in edit mode. Please enter edit mode first.');
        return;
    }
    
    // Try to select some text and apply formatting
    const bookContent = document.getElementById('bookContent');
    if (!bookContent || bookContent.textContent.length < 20) {
        console.log('   - Need more text content to test.');
        return;
    }
    
    // Create a selection
    const range = document.createRange();
    const textNode = bookContent.firstChild;
    if (textNode && textNode.nodeType === Node.TEXT_NODE) {
        range.setStart(textNode, 0);
        range.setEnd(textNode, Math.min(10, textNode.textContent.length));
        
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        
        console.log('   - Text selected:', selection.toString());
        
        // Test applying bold formatting
        setTimeout(() => {
            console.log('   - You can now click the Bold button to test formatting!');
            console.log('   - For nested formatting, apply Bold first, then select the same text and apply Italic');
        }, 100);
    }
};

// DEBUGGING: Test nested formatting fixes
window.testNestedFormatting = function() {
    import('./modules/formattingRenderer.js').then(({ testNestedFormatting }) => {
        testNestedFormatting();
    });
};

// DEBUGGING: Test persistence fixes
window.testPersistenceFix = function() {
    console.log('üß™ TESTING PERSISTENCE FIXES:');
    console.log('1. Apply some formatting');
    console.log('2. Exit edit mode and choose "Discard"');
    console.log('3. Re-enter edit mode');
    console.log('4. Check if formatting is gone (should be!)');
};

// Smart Select function - automatically selects configurable character chunks ending on periods
function smartSelect() {
    // Perform the smart selection
    const selection = performSmartSelect();
    
    if (selection) {
        // Highlight the selected text
        const highlighted = highlightSmartSelection(selection);
        console.log(`Highlighting result: ${highlighted}`);
        
        // Show selection tools using dedicated module
        showSelectionTools(selection);
        
        // Log warning if highlighting failed but tools are still shown
        if (!highlighted) {
            console.warn('Text highlighting failed, but selection tools are still available');
        }
    }
}

// Reset smart select position function
function resetSmartSelectPosition() {
    resetSmartSelect();
    hideSelectionTools();
    clearTextSelection();
    showSuccess('Smart selection position reset to the beginning!');
}

async function initialize() {
    console.log('üöÄ Initializing AudioBook Organizer...');
    
    if (window.authModule) {
        await initApp(window.authModule);
        
        // Initialize formatting system
        initializeFormattingShortcuts();
        initializeSelectionTracking();
        initializeToolbarPositioning();
        initializeCommentsSystem();
        
        // Initialize testing mode UI if needed
        await testingModeUI.init();
        
        console.log('‚ú® Formatting system initialized');
    } else {
        console.error('‚ùå Auth module not found, cannot initialize app');
    }
}

function cleanup() {
    console.log('üßπ Cleaning up main application...');
    cleanupApp();
}

// Add CSS load verification
window.verifyCSSLoading = function() {
    console.log('üîç Verifying CSS loading...');
    
    // Check if formatting.css is loaded
    const formattingStyles = Array.from(document.styleSheets)
        .find(sheet => sheet.href && sheet.href.includes('formatting.css'));
    
    console.log('Formatting CSS loaded:', !!formattingStyles);
    
    if (formattingStyles) {
        try {
            // Test element
            const testEl = document.createElement('div');
            testEl.className = 'fmt-bold';
            testEl.style.position = 'absolute';
            testEl.style.left = '-9999px';
            document.body.appendChild(testEl);
            
            const computedStyle = window.getComputedStyle(testEl);
            console.log('Test element styles:', {
                fontWeight: computedStyle.fontWeight,
                backgroundColor: computedStyle.backgroundColor
            });
            
            document.body.removeChild(testEl);
        } catch (error) {
            console.error('Error testing CSS:', error);
        }
    }
    
    // Check book content element
    const bookContent = document.getElementById('bookContent');
    if (bookContent) {
        console.log('Book content element:', {
            className: bookContent.className,
            computedStyle: window.getComputedStyle(bookContent)
        });
    }
};

// Run CSS verification on load
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(window.verifyCSSLoading, 1000);
});

// Formatting system test function (simplified)
window.testFormattingStyles = function() {
    console.log('üß™ Testing formatting styles...');
    
    const bookContent = document.getElementById('bookContent');
    if (!bookContent) {
        console.log('‚ùå No book content found');
        return;
    }
    
    // Test each formatting type
    const testFormats = ['fmt-title', 'fmt-subtitle', 'fmt-section', 'fmt-subsection', 'fmt-bold', 'fmt-italic', 'fmt-underline'];
    
    testFormats.forEach(className => {
        const testEl = document.createElement('div');
        testEl.className = className;
        testEl.textContent = `Test ${className}`;
        testEl.style.position = 'absolute';
        testEl.style.left = '-9999px';
        bookContent.appendChild(testEl);
        
        const computedStyle = window.getComputedStyle(testEl);
        console.log(`‚úÖ ${className}:`, {
            fontSize: computedStyle.fontSize,
            fontWeight: computedStyle.fontWeight,
            fontStyle: computedStyle.fontStyle,
            textDecoration: computedStyle.textDecoration
        });
        
        testEl.remove();
    });
    
    console.log('üß™ Formatting test complete');
};

// Export the functions for the router to use
export { initialize, cleanup };
-------------------------------------

TABLEOFCONTENTS.js :

// AudioBook Organizer - Table of Contents Module

import { formattingData } from './formattingState.js';
import { showError, showInfo } from './notifications.js';

// TOC State Management
let tocState = {
    isVisible: false,
    headers: [],
    activeHeaderId: null,
    isScrolling: false,
    scrollObserver: null,
    elements: {
        sidebar: null,
        list: null,
        count: null,
        toggle: null
    }
};

// Header type configuration with icons and levels
const HEADER_CONFIG = {
    'title': { level: 1, icon: 'üìñ', className: 'fmt-title' },
    'subtitle': { level: 2, icon: 'üìÑ', className: 'fmt-subtitle' },
    'section': { level: 3, icon: 'üìã', className: 'fmt-section' },
    'subsection': { level: 4, icon: 'üìù', className: 'fmt-subsection' }
};

/**
 * Initialize the Table of Contents system
 */
export function initializeTableOfContents() {
    try {
        console.log('üîç Initializing Table of Contents...');
        
        createTOCElements();
        setupEventListeners();
        extractAndDisplayHeaders();
        setupScrollObserver();
        
        console.log('‚úÖ Table of Contents initialized successfully');
        
    } catch (error) {
        console.error('‚ùå Failed to initialize Table of Contents:', error);
        showError('Failed to initialize Table of Contents');
    }
}

/**
 * Create TOC DOM elements and add to layout
 */
function createTOCElements() {
    // Create TOC sidebar
    const tocSidebar = document.createElement('div');
    tocSidebar.id = 'tocSidebar';
    tocSidebar.className = 'toc-sidebar';
    tocSidebar.innerHTML = `
        <div class="toc-header">
            <h3>üìã Table of Contents</h3>
            <button class="toc-close-btn" title="Close Table of Contents" aria-label="Close Table of Contents">√ó</button>
        </div>
        <div class="toc-content">
            <div id="tocList" class="toc-list">
                <div class="toc-loading">
                    <div class="toc-loading-spinner"></div>
                    <div>Scanning document...</div>
                </div>
            </div>
        </div>
        <div class="toc-footer">
            <small class="toc-count" id="tocCount">Scanning headers...</small>
        </div>
    `;
    
    // Append to body (as overlay)
    document.body.appendChild(tocSidebar);
    
    // Create toggle button and add to book content header
    const bookContentHeader = document.querySelector('.column:first-child .column-header .header-controls');
    if (bookContentHeader) {
        const toggleButton = document.createElement('button');
        toggleButton.className = 'toc-toggle-btn';
        toggleButton.id = 'tocToggleBtn';
        toggleButton.innerHTML = '<i>üìã</i> <span class="toc-toggle-text">TOC</span>';
        toggleButton.title = 'Toggle Table of Contents';
        toggleButton.setAttribute('aria-label', 'Toggle Table of Contents');
        
        // Insert at beginning of controls
        bookContentHeader.insertBefore(toggleButton, bookContentHeader.firstChild);
    }
    
    // Store element references
    tocState.elements = {
        sidebar: tocSidebar,
        list: document.getElementById('tocList'),
        count: document.getElementById('tocCount'),
        toggle: document.getElementById('tocToggleBtn')
    };
}

/**
 * Setup event listeners
 */
function setupEventListeners() {
    // Toggle button click
    if (tocState.elements.toggle) {
        tocState.elements.toggle.addEventListener('click', toggleTableOfContents);
    }
    
    // Close button click
    const closeBtn = tocState.elements.sidebar?.querySelector('.toc-close-btn');
    if (closeBtn) {
        closeBtn.addEventListener('click', () => {
            if (tocState.isVisible) {
                toggleTableOfContents();
            }
        });
    }
    
    // Click outside sidebar to close
    document.addEventListener('click', handleOutsideClick);
    
    // Keyboard shortcuts
    document.addEventListener('keydown', handleKeyboardShortcuts);
}

/**
 * Handle keyboard shortcuts
 */
function handleKeyboardShortcuts(event) {
    // Ctrl/Cmd + Shift + T to toggle TOC
    if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'T') {
        event.preventDefault();
        toggleTableOfContents();
    }
    
    // Escape to close TOC if open
    if (event.key === 'Escape' && tocState.isVisible) {
        toggleTableOfContents();
    }
}

/**
 * Handle clicks outside TOC to close it
 */
function handleOutsideClick(event) {
    if (!tocState.isVisible) return;
    
    const tocSidebar = tocState.elements.sidebar;
    const toggleBtn = tocState.elements.toggle;
    
    // Don't close if clicking inside sidebar or on toggle button
    if (tocSidebar && tocSidebar.contains(event.target)) return;
    if (toggleBtn && toggleBtn.contains(event.target)) return;
    
    // Close TOC if clicking outside
    toggleTableOfContents();
}

/**
 * Toggle Table of Contents visibility
 */
export function toggleTableOfContents() {
    const wasVisible = tocState.isVisible;
    tocState.isVisible = !wasVisible;
    
    // Update sidebar
    if (tocState.elements.sidebar) {
        tocState.elements.sidebar.classList.toggle('toc-open', tocState.isVisible);
    }
    
    // Update toggle button state
    if (tocState.elements.toggle) {
        tocState.elements.toggle.classList.toggle('active', tocState.isVisible);
        tocState.elements.toggle.setAttribute('aria-pressed', tocState.isVisible.toString());
    }
    
    // Accessibility
    if (tocState.isVisible) {
        tocState.elements.sidebar?.setAttribute('aria-hidden', 'false');
        // Focus the first header item for keyboard navigation
        const firstHeader = tocState.elements.list?.querySelector('.toc-item');
        if (firstHeader) {
            setTimeout(() => firstHeader.focus(), 100);
        }
    } else {
        tocState.elements.sidebar?.setAttribute('aria-hidden', 'true');
    }
    
    console.log(`üìã TOC ${tocState.isVisible ? 'opened' : 'closed'}`);
}

/**
 * Extract headers from formatting data and display them
 */
function extractAndDisplayHeaders() {
    try {
        const headers = extractTableOfContents();
        tocState.headers = headers;
        displayHeaders(headers);
        updateHeaderCount(headers.length);
        
        console.log(`üìã Found ${headers.length} headers in document`);
        
    } catch (error) {
        console.error('‚ùå Failed to extract headers:', error);
        displayError('Failed to scan document headers');
    }
}

/**
 * Extract headers from formatting data
 */
function extractTableOfContents() {
    if (!formattingData?.ranges) {
        console.log('üìã No formatting data available');
        return [];
    }
    
    const headerTypes = Object.keys(HEADER_CONFIG);
    const bookContent = document.getElementById('bookContent');
    
    if (!bookContent || !bookContent.textContent) {
        console.log('üìã No book content available');
        return [];
    }
    
    const fullText = bookContent.textContent;
    
    // Debug: Log formatting data structure
    console.log('üîç DEBUG: formattingData.ranges length:', formattingData.ranges.length);
    console.log('üîç DEBUG: headerTypes:', headerTypes);
    console.log('üîç DEBUG: First 3 formatting ranges:', formattingData.ranges.slice(0, 3));
    
    const filteredRanges = formattingData.ranges.filter(range => headerTypes.includes(range.type));
    console.log('üîç DEBUG: Filtered header ranges count:', filteredRanges.length);
    console.log('üîç DEBUG: First 3 filtered ranges:', filteredRanges.slice(0, 3));
    
    const headers = filteredRanges
        .map((range, index) => {
            const config = HEADER_CONFIG[range.type];
            const text = extractHeaderText(range, fullText);
            
            // Create a unique ID for this header since range.id is undefined
            const headerId = `${range.type}-${range.start}-${range.end}`;
            
            const header = {
                id: headerId,
                type: range.type,
                level: config.level,
                icon: config.icon,
                text: text,
                position: range.start,
                endPosition: range.end,
                element: null // Will be populated when creating DOM elements
            };
            
            // Debug each header creation
            if (index < 3) {
                console.log(`üîç DEBUG: Creating header ${index + 1}:`, {
                    originalRange: range,
                    createdHeader: header
                });
            }
            
            return header;
        })
        .sort((a, b) => a.position - b.position);
    
    // Debug: Log first few headers to see if they're different
    console.log('üîç DEBUG: First 5 headers extracted:', headers.slice(0, 5).map(h => ({
        id: h.id,
        text: h.text?.substring(0, 50),
        position: h.position,
        type: h.type
    })));
    
    // Debug: Check for duplicates
    const uniquePositions = new Set(headers.map(h => h.position));
    const uniqueTexts = new Set(headers.map(h => h.text));
    console.log('üîç DEBUG: Unique positions count:', uniquePositions.size, 'vs total headers:', headers.length);
    console.log('üîç DEBUG: Unique texts count:', uniqueTexts.size, 'vs total headers:', headers.length);
    
    return headers;
}

/**
 * Extract text content for a header range
 */
function extractHeaderText(range, fullText) {
    if (!fullText || range.start < 0 || range.end > fullText.length) {
        return 'Untitled Header';
    }
    
    const text = fullText.substring(range.start, range.end).trim();
    
    // Clean up the text
    return text
        .replace(/\s+/g, ' ') // Normalize whitespace
        .substring(0, 100) // Limit length
        .trim() || 'Untitled Header';
}

/**
 * Display headers in the TOC list
 */
function displayHeaders(headers) {
    const tocList = tocState.elements.list;
    if (!tocList) return;
    
    if (headers.length === 0) {
        displayEmptyState();
        return;
    }
    
    // Create header items
    const headerElements = headers.map((header, index) => {
        const item = document.createElement('div');
        item.className = 'toc-item';
        item.dataset.headerId = header.id;
        item.dataset.level = header.level.toString();
        item.setAttribute('role', 'button');
        item.setAttribute('tabindex', '0');
        item.setAttribute('aria-label', `Navigate to ${header.text}`);
        
        item.innerHTML = `
            <span class="toc-item-icon">${header.icon}</span>
            <span class="toc-item-text">${escapeHtml(header.text)}</span>
        `;
        
        // Add click handler
        item.addEventListener('click', () => navigateToHeader(header.id));
        
        // Add keyboard handler
        item.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                navigateToHeader(header.id);
            }
        });
        
        // Store element reference
        header.element = item;
        
        // Add entrance animation
        setTimeout(() => {
            item.classList.add('toc-item-enter');
        }, index * 50);
        
        return item;
    });
    
    // Update DOM
    tocList.innerHTML = '';
    headerElements.forEach(element => tocList.appendChild(element));
}

/**
 * Display empty state when no headers found
 */
function displayEmptyState() {
    const tocList = tocState.elements.list;
    if (!tocList) return;
    
    tocList.innerHTML = `
        <div class="toc-empty">
            <div class="toc-empty-icon">üìÑ</div>
            <div class="toc-empty-text">
                No headers found in document.<br>
                Try uploading a document with formatted headings.
            </div>
        </div>
    `;
}

/**
 * Display error state
 */
function displayError(message) {
    const tocList = tocState.elements.list;
    if (!tocList) return;
    
    tocList.innerHTML = `
        <div class="toc-empty">
            <div class="toc-empty-icon">‚ö†Ô∏è</div>
            <div class="toc-empty-text">${escapeHtml(message)}</div>
        </div>
    `;
}

/**
 * Update header count display
 */
function updateHeaderCount(count) {
    if (tocState.elements.count) {
        const text = count === 0 ? 'No headers found' : 
                    count === 1 ? '1 header found' : 
                    `${count} headers found`;
        tocState.elements.count.textContent = text;
    }
}

/**
 * Navigate to a specific header
 */
export function navigateToHeader(headerId) {
    const header = tocState.headers.find(h => h.id === headerId);
    if (!header) {
        console.warn(`üìã Header ${headerId} not found`);
        return;
    }
    
    console.log(`üìã Navigating to header: ${header.text}`);
    console.log('üîç Header Details:', {
        id: header.id,
        text: header.text,
        position: header.position,
        endPosition: header.endPosition,
        type: header.type
    });
    
    try {
        // Find the header element by formatting ID (more precise than text)
        const headerElement = findHeaderElementById(header.id) || findHeaderElementByText(header.text);
        
        if (headerElement) {
            console.log('üîç Header Element Found:', {
                headerElement,
                headerClass: headerElement?.className,
                headerText: headerElement?.textContent?.substring(0, 50),
                formattingId: headerElement?.getAttribute('data-formatting-id')
            });
            
            // Find the scrollable container (the column-content div)
            const scrollContainer = headerElement.closest('.column-content');
            
            if (scrollContainer) {
                // Calculate header position relative to the scroll container
                const headerRect = headerElement.getBoundingClientRect();
                const containerRect = scrollContainer.getBoundingClientRect();
                const relativeTop = headerRect.top - containerRect.top + scrollContainer.scrollTop;
                
                // Scroll the container to the header position with some offset for better positioning
                scrollContainer.scrollTo({
                    top: Math.max(0, relativeTop - 80), // 80px offset from top for better visibility
                    behavior: 'smooth'
                });
                
                console.log('‚úÖ Scrolled content container to header position:', relativeTop);
            } else {
                // Fallback: scroll the header into view (but this will move the whole page)
                headerElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                console.log('‚ö†Ô∏è Used fallback scrollIntoView (may move page headers)');
            }
            
            // Add flash animation (same as sections)
            headerElement.classList.remove('toc-flash');
            void headerElement.offsetWidth; // Force reflow to restart animation
            headerElement.classList.add('toc-flash');
            
            // Remove flash class after animation
            setTimeout(() => {
                headerElement.classList.remove('toc-flash');
            }, 1000);
            
            console.log('‚úÖ Scrolled to header successfully');
        } else {
            console.log('‚ùå No header element found by ID or text');
        }
        
        // Update active header
        setActiveHeader(headerId);
        
        // Auto-close TOC after navigation
        setTimeout(() => {
            if (tocState.isVisible) {
                toggleTableOfContents();
            }
        }, 500);
        
        // Visual feedback
        highlightHeader(header);
        
    } catch (error) {
        console.error('‚ùå Failed to navigate to header:', error);
        showError('Failed to navigate to section');
    }
}

/**
 * Find the actual header DOM element by formatting ID (most precise method)
 */
function findHeaderElementById(headerId) {
    const bookContent = document.getElementById('bookContent');
    if (!bookContent) return null;
    
    // Look for element with the exact formatting ID
    const headerElement = bookContent.querySelector(`[data-formatting-id="${headerId}"]`);
    
    if (headerElement) {
        console.log('‚úÖ Found header by formatting ID:', headerElement);
        return headerElement;
    }
    
    console.log('‚ùå No header found by formatting ID:', headerId);
    return null;
}

/**
 * Find the actual header DOM element by text content (fallback method)
 */
function findHeaderElementByText(headerText) {
    const bookContent = document.getElementById('bookContent');
    if (!bookContent) return null;
    
    // Look for elements with header formatting classes
    const headerClasses = ['.fmt-title', '.fmt-subtitle', '.fmt-section', '.fmt-subsection'];
    const allHeaders = bookContent.querySelectorAll(headerClasses.join(', '));
    
    console.log('üîç Header Search by Text:', {
        targetText: headerText,
        totalHeaders: allHeaders.length
    });
    
    // Find exact text match first
    for (let header of allHeaders) {
        const headerTextContent = header.textContent?.trim();
        if (headerTextContent === headerText) {
            console.log('‚úÖ Found exact text match:', header);
            return header;
        }
    }
    
    // Try partial match if exact match fails
    for (let header of allHeaders) {
        const headerTextContent = header.textContent?.trim();
        if (headerTextContent && headerTextContent.includes(headerText)) {
            console.log('‚úÖ Found partial text match:', header);
            return header;
        }
    }
    
    // Try reverse partial match
    for (let header of allHeaders) {
        const headerTextContent = header.textContent?.trim();
        if (headerTextContent && headerText.includes(headerTextContent)) {
            console.log('‚úÖ Found reverse partial match:', header);
            return header;
        }
    }
    
    console.log('‚ùå No matching header found for text:', headerText);
    return null;
}

/**
 * Set active header in TOC
 */
function setActiveHeader(headerId) {
    // Remove previous active
    tocState.headers.forEach(header => {
        if (header.element) {
            header.element.classList.remove('active');
        }
    });
    
    // Set new active
    const header = tocState.headers.find(h => h.id === headerId);
    if (header?.element) {
        header.element.classList.add('active');
        tocState.activeHeaderId = headerId;
        
        // Scroll TOC to show active item
        header.element.scrollIntoView({
            behavior: 'smooth',
            block: 'nearest'
        });
    }
}

/**
 * Highlight header with visual feedback
 */
function highlightHeader(header) {
    if (header.element) {
        header.element.classList.add('toc-highlight-pulse');
        setTimeout(() => {
            header.element?.classList.remove('toc-highlight-pulse');
        }, 600);
    }
}

/**
 * Setup scroll observer to track current section
 */
function setupScrollObserver() {
    const bookContent = document.getElementById('bookContent');
    const scrollContainer = bookContent?.closest('.column-content');
    
    if (!bookContent || !scrollContainer || !window.IntersectionObserver) {
        console.log('üìã Scroll observer not available or missing containers');
        return;
    }
    
    // Clean up existing observer
    if (tocState.scrollObserver) {
        tocState.scrollObserver.disconnect();
    }
    
    // Create intersection observer to track visible headers using the correct scroll container
    tocState.scrollObserver = new IntersectionObserver(
        (entries) => {
            if (tocState.isScrolling) return; // Don't update during programmatic scroll
            
            // Find the most visible header
            let mostVisible = null;
            let maxRatio = 0;
            
            entries.forEach(entry => {
                if (entry.intersectionRatio > maxRatio) {
                    maxRatio = entry.intersectionRatio;
                    mostVisible = entry.target;
                }
            });
            
            if (mostVisible) {
                const headerId = mostVisible.dataset.headerId;
                if (headerId && headerId !== tocState.activeHeaderId) {
                    setActiveHeader(headerId);
                }
            }
        },
        {
            root: scrollContainer, // Use the correct scroll container as root
            rootMargin: '-10% 0px -90% 0px',
            threshold: [0, 0.25, 0.5, 0.75, 1]
        }
    );
    
    console.log('üìã Scroll observer setup with correct scroll container');
}

/**
 * Refresh TOC when content changes
 */
export function refreshTableOfContents() {
    console.log('üîÑ Refreshing Table of Contents...');
    
    try {
        extractAndDisplayHeaders();
        
        // Reset active header
        tocState.activeHeaderId = null;
        
        console.log('‚úÖ Table of Contents refreshed');
        
    } catch (error) {
        console.error('‚ùå Failed to refresh TOC:', error);
    }
}

/**
 * Cleanup TOC resources
 */
export function cleanupTableOfContents() {
    console.log('üßπ Cleaning up Table of Contents...');
    
    // Disconnect observer
    if (tocState.scrollObserver) {
        tocState.scrollObserver.disconnect();
        tocState.scrollObserver = null;
    }
    
    // Remove event listeners
    document.removeEventListener('keydown', handleKeyboardShortcuts);
    document.removeEventListener('click', handleOutsideClick);
    
    // Remove TOC elements
    if (tocState.elements.sidebar) {
        tocState.elements.sidebar.remove();
    }
    
    if (tocState.elements.toggle) {
        tocState.elements.toggle.remove();
    }
    
    // Reset state
    tocState = {
        isVisible: false,
        headers: [],
        activeHeaderId: null,
        isScrolling: false,
        scrollObserver: null,
        elements: {
            sidebar: null,
            list: null,
            count: null,
            toggle: null
        }
    };
    
    console.log('‚úÖ Table of Contents cleanup complete');
}

/**
 * Get current TOC state (for debugging)
 */
export function getTOCState() {
    return {
        ...tocState,
        headerCount: tocState.headers.length,
        isInitialized: !!tocState.elements.sidebar
    };
}

/**
 * Utility function to escape HTML
 */
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Make functions available globally for onclick handlers and integration
window.toggleTableOfContents = toggleTableOfContents;
window.navigateToHeader = navigateToHeader;
window.refreshTableOfContents = refreshTableOfContents; 


 