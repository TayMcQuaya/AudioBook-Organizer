api.js:141: console.error('API health check failed:', error);
api.js:40: console.warn('Failed to get CSRF token:', error);
appConfig.js:105: console.log(`🔧 Initializing app config for ${serverType} (testing: ${isTestingMode})`);
appConfig.js:130: console.log('📋 App configuration loaded successfully');
appConfig.js:141: console.warn('⚠️ AppConfig not initialized, using default value');
appConfig.js:167: console.log(`⏱️ Applying ${configKey} delay: ${ms}ms`);
appConfig.js:178: console.log(`⏱️ ${operation} completed in ${duration}ms`);
appConfig.js:193: console.log('🚀 Enabling fast refresh mode for optimal performance');
appInitialization.js:105: console.log('Testing mode - auth status:', isAuthenticated);
appInitialization.js:109: console.log('Normal mode - auth status:', isAuthenticated);
appInitialization.js:113: console.log('👤 User not authenticated, skipping project restoration');
appInitialization.js:119: console.log('📝 Current project exists, skipping auto-restoration');
appInitialization.js:137: console.log(`✅ Project restored successfully from ${storageType}`);
appInitialization.js:140: console.log('📭 No previous project found, starting fresh');
appInitialization.js:145: console.error('❌ Error during project restoration:', error);
appInitialization.js:228: console.warn('⚠️ Session manager not found - router initialization may have failed');
appInitialization.js:232: console.log('✅ Using session manager initialized by router');
appInitialization.js:248: console.log('🔄 Pre-initializing Stripe service...');
appInitialization.js:25: console.log('🧹 Cleaning up application resources...', fullCleanup ? '(full cleanup)' : '(minimal cleanup)');
appInitialization.js:253: console.log('✅ Stripe service pre-initialized and globally available');
appInitialization.js:255: console.warn('⚠️ Stripe service pre-initialization failed (this is normal in testing mode):', error.message);
appInitialization.js:259: console.log('🔄 Initializing credit system...');
appInitialization.js:268: console.log('✅ Credit system initialized with real user data');
appInitialization.js:273: console.log('✅ Credit system initialized with demo data (testing mode)');
appInitialization.js:275: console.log('✅ Credit system UI initialized (no auth)');
appInitialization.js:278: console.error('❌ Credit system initialization failed:', error);
appInitialization.js:281: console.log('All modules initialized');
appInitialization.js:288: console.log('App already initialized. Skipping.');
appInitialization.js:292: console.log('📱 AudioBook Organizer - Initializing application...');
appInitialization.js:307: console.error('❌ Background project restoration failed:', error);
appInitialization.js:311: console.log('📋 Initializing Table of Contents...');
appInitialization.js:316: console.log('✅ Table of Contents initialized successfully');
appInitialization.js:318: console.error('❌ Table of Contents initialization failed:', error);
appInitialization.js:331: console.log('✅ AudioBook Organizer - Application ready!');
appInitialization.js:334: console.error('❌ Error during app initialization:', error);
appInitialization.js:34: console.log('...text selection cleaned up.');
appInitialization.js:41: console.log('...user navigation removed.');
appInitialization.js:46: console.log('✅ Application full cleanup complete.');
appInitialization.js:50: console.log('✅ Application minimal cleanup complete - app state preserved.');
appInitialization.js:67: console.log('Selection guide shown to first-time user');
appInitialization.js:80: console.log(`Navigating to section: ${sectionId}`);
appInitialization.js:92: console.log('Application initialized with clean state');
appInitialization.js:98: console.log('🔄 Attempting to restore latest project...');
appUI.js:134: console.log(`🔍 UI: No user provided to createUserNavigation, found: ${!!user}`);
appUI.js:183: console.log('✅ User nav inserted after existing credits display');
appUI.js:187: console.log('✅ User nav inserted before auth button');
appUI.js:191: console.log('✅ User nav appended to end of nav-links');
appUI.js:200: console.log('✅ User dropdown created and properly hidden');
appUI.js:23: console.log('🎨 Initializing UI manager...');
appUI.js:27: console.log('🔄 UI manager already initialized, refreshing auth state...');
appUI.js:290: console.warn('⚠️ User dropdown not found');
appUI.js:296: console.log(`🔄 User dropdown toggled: ${isShowing ? 'hiding' : 'showing'}`);
appUI.js:305: console.log('🔄 User dropdown closed by outside click');
appUI.js:36: console.log('🔄 Triggering auth status check before UI initialization...');
appUI.js:360: console.log(`💎 Testing mode - Credits display updated: ${currentTestCredits}`);
appUI.js:371: console.warn(`⚠️ Low credits: ${credits} remaining`);
appUI.js:378: console.error('Error updating credits display:', error);
appUI.js:399: console.log(`💎 Testing mode - Consumed ${amount} credits for ${action}: ${currentCredits} → ${newCredits}`);
appUI.js:408: console.error('Error consuming test credits:', error);
appUI.js:436: console.error('Error checking credits:', error);
appUI.js:47: console.log('✅ UI manager initialized');
appUI.js:65: console.log(`🔍 UI: Comprehensive auth state - Session: ${sessionState.isAuthenticated}, AuthModule: ${authModuleAuth}, User: ${!!user}`);
auth.js:1031: console.warn('Error parsing stored Supabase session:', error);
auth.js:104: console.log('🔐 Initializing authentication module...');
auth.js:1053: console.error('Error checking auth status:', error);
auth.js:1077: console.error('Error fetching credits:', error);
auth.js:108: console.log('User already authenticated, redirecting to app...');
auth.js:1105: console.error('Error in auth listener:', error);
auth.js:1143: console.warn('Failed to get session for API request:', error);
auth.js:1159: console.warn('Unauthorized API request detected');
auth.js:1169: console.log("Setting up password recovery page...");
auth.js:1176: console.error("Could not find required elements on the password reset page.");
auth.js:119: console.warn('⚠️ Supabase failed to initialize - forms will work for validation only');
auth.js:122: console.warn('⚠️ Authentication not configured - running in demo mode');
auth.js:1239: console.log('🔍 Password update session check:', {
auth.js:126: console.log('✅ Authentication module initialized');
auth.js:126: console.log('✅ Authentication page initialized');
auth.js:1266: console.error('❌ Failed to update password:', error);
auth.js:129: console.error('❌ Failed to initialize auth page:', error);
auth.js:129: console.error('❌ Failed to initialize authentication:', error);
auth.js:1301: console.log('🚪 User manually exiting password recovery');
auth.js:1306: console.log('✅ Signed out during recovery exit');
auth.js:1308: console.warn('⚠️ Sign out failed during recovery exit:', error);
auth.js:137: console.log('🔍 Getting DOM elements...');
auth.js:145: console.log('✅ Authentication config loaded');
auth.js:147: console.warn('⚠️ No authentication config available');
auth.js:151: console.warn('⚠️ Failed to load auth config:', error);
auth.js:167: console.error(`❌ Critical element not found: ${elementName}`);
auth.js:169: console.log(`✅ Found element: ${elementName}`);
auth.js:172: console.log('✅ Loaded Supabase from jsdelivr');
auth.js:178: console.log('✅ Loaded Supabase from unpkg');
auth.js:178: console.log('🎯 Setting up event listeners...');
auth.js:183: console.log('✅ Auth container found, setting up button event delegation');
auth.js:183: console.log('✅ Loaded Supabase from skypack');
auth.js:191: console.log('📝 Switching to signup form');
auth.js:197: console.log('🔐 Switching to login form');
auth.js:199: console.log('✅ Supabase client initialized');
auth.js:201: console.error('❌ Failed to initialize Supabase client:', error);
auth.js:202: console.log('🔑 Switching to forgot password form');
auth.js:202: console.warn('⚠️ Running without Supabase - forms will show validation only');
auth.js:212: console.error('❌ Auth container not found!');
auth.js:217: console.log('✅ Adding login form submit listener');
auth.js:220: console.error('❌ Login form not found!');
auth.js:224: console.log('✅ Adding signup form submit listener');
auth.js:227: console.error('❌ Signup form not found!');
auth.js:228: console.log('🔄 Ignoring duplicate auth event:', event);
auth.js:231: console.log('✅ Adding forgot password form submit listener');
auth.js:234: console.error('❌ Forgot password form not found!');
auth.js:235: console.log('🔄 Auth state changed:', event);
auth.js:239: console.log('🔑 Password recovery event detected - activating recovery mode');
auth.js:248: console.log('✅ Adding auth state listener');
auth.js:252: console.log('🔑 Sign out during password recovery - allowing.');
auth.js:252: console.warn('⚠️ Auth module not available or addAuthListener not found');
auth.js:257: console.log(`🔑 ${event} during recovery - allowing session setup but preventing login behavior.`);
auth.js:266: console.log(`🔑 Ignoring ${event} during password recovery mode.`);
auth.js:284: console.log('🔄 Google OAuth callback detected with no session yet, waiting...');
auth.js:290: console.log('⚠️ Still no session after OAuth delay, proceeding with sign out');
auth.js:309: console.log('👤 User data was updated.');
auth.js:322: console.warn(`Unhandled auth event: ${event}`);
auth.js:332: console.error('Invalid session provided');
auth.js:334: console.log('🌐 Setting up social auth buttons...');
auth.js:338: console.warn('🚨 Session failed security validation - blocking authentication');
auth.js:339: console.log(`🔍 Google ${action} button clicked`);
auth.js:342: console.error('❌ Auth module not available');
auth.js:348: console.log('⏳ Already loading, ignoring Google auth request');
auth.js:351: console.log('🔄 Ignoring duplicate auth success for same user session');
auth.js:355: console.log(`🔐 Starting Google ${action}...`);
auth.js:359: console.log(`✅ Google ${action} initiated successfully`);
auth.js:359: console.log('🆕 New session detected');
auth.js:366: console.error(`❌ Google ${action} failed:`, error);
auth.js:371: console.error('❌ No access token in session');
auth.js:374: console.log('✅ Google Sign In button found');
auth.js:377: console.warn('⚠️ Google Sign In button not found');
auth.js:378: console.error('❌ Received invalid JWT token format');
auth.js:381: console.log('✅ Google Sign Up button found');
auth.js:384: console.warn('⚠️ Google Sign Up button not found');
auth.js:386: console.log('✅ Valid JWT token stored for authenticated user');
auth.js:390: console.log('✅ Password recovery session established - ready for password update');
auth.js:399: console.log('🔐 Login form submitted');
auth.js:402: console.log('⏳ Already loading, ignoring submission');
auth.js:411: console.error('❌ Login form inputs not found');
auth.js:419: // console.log(`📧 Email: ${email}`);
auth.js:420: // console.log(`🔒 Password length: ${password.length}`);
auth.js:421: console.log('✅ User initialized successfully');
auth.js:423: console.log('❌ Form validation failed');
auth.js:428: console.error('❌ Auth module not available');
auth.js:434: console.log('👋 Welcome message shown for login');
auth.js:436: console.log('🔄 Session restored, skipping welcome message');
auth.js:437: console.log('🔐 Generating reCAPTCHA token...');
auth.js:439: console.log('✅ reCAPTCHA token generated');
auth.js:444: console.log('✅ Sign in successful');
auth.js:450: console.error('Sign in failed from form handler');
auth.js:453: console.error('❌ Sign in failed:', error);
auth.js:454: console.log('🔄 Google OAuth completed, navigating to app page');
auth.js:464: console.log('🚫 Preventing navigation from landing page - user specifically navigated here');
auth.js:465: console.log('✅ User chose landing page with hash, respecting their choice (e.g., pricing section)');
auth.js:467: console.log('🚫 Preventing navigation from landing page during refresh/session restoration');
auth.js:468: console.log('✅ User chose to be on landing page, respecting their choice');
auth.js:472: console.log(`🚫 Preventing navigation from payment page: ${currentPath}`);
auth.js:473: console.log('✅ User should see their payment result page, respecting their choice');
auth.js:477: console.log(`🔄 Navigating from ${currentPath} to ${returnUrl} after login`);
auth.js:48: console.log('🔐 Initializing authentication page...');
auth.js:484: console.log(`✅ Already on target page ${returnUrl}, skipping navigation`);
auth.js:493: console.log('🔄 Google OAuth session restored, navigating to app page');
auth.js:495: console.error('❌ Auth module not available');
auth.js:500: console.log(`🔄 Session restored on ${currentPath}, staying on current page`);
auth.js:504: console.log('🔐 Generating reCAPTCHA token for signup...');
auth.js:507: console.log('✅ Staying on landing page with hash during session restore');
auth.js:509: console.log('✅ Staying on landing page during session restore');
auth.js:511: console.log('✅ reCAPTCHA token generated for signup');
auth.js:512: console.log('✅ Staying on app page during session restore');
auth.js:514: console.log(`✅ Staying on payment page (${currentPath}) during session restore`);
auth.js:516: console.log(`✅ Staying on ${currentPath} during session restore`);
auth.js:522: console.error('Error during user initialization:', error);
auth.js:533: console.log('✅ Allowing PASSWORD_RECOVERY event - legitimate password reset');
auth.js:533: console.log('✅ Sign up successful');
auth.js:539: console.warn('🚨 Blocked SIGNED_IN during password recovery - potential session hijacking');
auth.js:545: console.warn('🚨 Invalid JWT structure detected');
auth.js:558: console.warn('🚨 Rapid authentication attempts detected');
auth.js:56: console.error('Auth module not provided or init function is missing');
auth.js:560: console.error('❌ Sign up failed:', error);
auth.js:568: console.log('✅ Skipping rapid auth check during password recovery');
auth.js:573: console.warn('🚨 Invalid email format in session');
auth.js:599: console.warn('🚫 Invalid JWT format - not enough segments');
auth.js:603: console.log('🔐 Generating reCAPTCHA token for password reset...');
auth.js:607: console.warn('🚫 Invalid JWT format - invalid characters');
auth.js:61: console.log('🔐 Initializing reCAPTCHA service...');
auth.js:610: console.log('✅ reCAPTCHA token generated for password reset');
auth.js:615: console.error('❌ Password reset failed:', error);
auth.js:641: console.log('ℹ️ User signed out and session cleared.');
auth.js:651: console.log('🔄 Auth token refreshed');
auth.js:663: console.log('🔄 User already initialized, skipping duplicate call');
auth.js:67: console.log('📱 Detected Google OAuth callback');
auth.js:68: console.log('🔄 Restored session flags:', {
auth.js:682: console.log('🎉 New user credits message shown');
auth.js:684: console.log('🔄 New user credits message already shown this session');
auth.js:688: console.log('✅ User initialized successfully');
auth.js:694: console.error('Failed to initialize user: API response error');
auth.js:697: console.error('Error initializing user:', error);
auth.js:736: console.log('✅ Supabase sign-in successful');
auth.js:753: console.log('🔐 Starting Google OAuth sign in...');
auth.js:76: console.warn('Failed to restore session flags:', error);
auth.js:761: console.warn('⚠️ DOM elements not ready for form switching');
auth.js:768: console.error('❌ Google OAuth error:', error);
auth.js:77: console.log('✅ Google OAuth session established');
auth.js:772: console.log('✅ Google OAuth initiated successfully');
auth.js:778: console.error('❌ Google sign in failed:', error);
auth.js:789: console.warn('⚠️ Supabase not available - simulating validation only');
auth.js:798: console.log('Auth page received auth state change:', event);
auth.js:813: console.log('✅ Sign up successful');
auth.js:817: console.error('❌ Sign up failed:', error);
auth.js:844: console.log('✅ Sign out successful');
auth.js:847: console.error('❌ Sign out failed:', error);
auth.js:849: console.log('🧹 Cleaning up auth page event listeners...');
auth.js:852: console.log('✅ Removed auth state listener');
auth.js:887: console.error('❌ Password reset failed:', error);
auth.js:933: console.log('✅ Auth state recovered from Supabase storage');
auth.js:94: console.warn('Failed to save session flags:', error);
auth.js:945: console.warn('Error checking stored Supabase session:', error);
auth.js:951: console.log('🔄 Session manager has auth state, syncing to auth module');
auth.js:96: console.error('❌ Google OAuth session not established after waiting');
auth.js:967: console.log('🔄 Found valid token but no user, triggering async verification');
auth.js:971: console.warn('Async token verification failed:', error);
auth.js:986: console.log('✅ Async session verification successful');
auth.js:991: console.warn('Async token verification failed:', error);
bookUpload.js:100: console.log('📋 DOCX IMPORT DEBUG: Processing formatting data...');
bookUpload.js:101: console.log('📋 DOCX IMPORT DEBUG: Text length:', text.length);
bookUpload.js:102: console.log('📋 DOCX IMPORT DEBUG: Formatting ranges count:', formattingData.ranges.length);
bookUpload.js:103: console.log('📋 DOCX IMPORT DEBUG: Sample ranges:', formattingData.ranges.slice(0, 3));
bookUpload.js:111: console.warn('📋 DOCX IMPORT DEBUG: Found invalid ranges:', invalidRanges);
bookUpload.js:117: console.log(`✅ Loaded ${formattingData.ranges.length} formatting ranges from DOCX`);
bookUpload.js:122: console.log('📋 DOCX IMPORT DEBUG: About to apply formatting. DOM text length:', bookContent.textContent.length);
bookUpload.js:124: console.log('✅ Applied DOCX formatting to DOM');
bookUpload.js:126: console.error('Error applying DOCX formatting:', error);
bookUpload.js:130: console.error('Error setting DOCX formatting data:', error);
bookUpload.js:153: console.log(`📄 File uploaded successfully:`, {
bookUpload.js:159: console.log(`Book uploaded successfully: ${text.length} characters`);
bookUpload.js:172: console.log('💎 DOCX upload completed - refreshing credit display');
bookUpload.js:173: updateUserCredits().catch(err => console.warn('Failed to update credits:', err));
bookUpload.js:176: console.log('💎 TXT upload completed - refreshing credit display');
bookUpload.js:177: updateUserCredits().catch(err => console.warn('Failed to update credits:', err));
bookUpload.js:184: console.log('🔄 Starting hybrid DOCX processing...');
bookUpload.js:199: console.log('✅ Hybrid DOCX processing completed');
bookUpload.js:203: console.error('❌ Hybrid DOCX processing failed:', error);
bookUpload.js:205: console.log('🔄 Falling back to backend-only processing...');
bookUpload.js:213: console.log('🔄 Processing DOCX with mammoth.js...');
bookUpload.js:225: console.log(`🔧 Frontend conversion result: ${converted.text.length} chars, ${converted.formattingRanges.length} ranges`);
bookUpload.js:243: console.error('❌ Frontend DOCX processing failed:', error);
bookUpload.js:256: console.log('🔄 Merging backend and frontend DOCX results...');
bookUpload.js:262: console.log(`📊 Text lengths - Backend: ${backendText.length}, Frontend: ${frontendText.length}`);
bookUpload.js:268: console.log(`📊 Processing success - Backend: ${backendSuccess}, Frontend: ${frontendSuccess}`);
bookUpload.js:280: console.log('✅ Using backend as primary (both successful, backend text substantial)');
bookUpload.js:286: console.log('✅ Using frontend as primary (backend text incomplete)');
bookUpload.js:293: console.log('✅ Using frontend as primary (backend failed)');
bookUpload.js:299: console.log('✅ Using backend as primary (frontend failed)');
bookUpload.js:302: console.log('❌ Both processing methods failed');
bookUpload.js:314: console.log(`🔍 Range counts - Base: ${baseRanges.length}, Fallback: ${fallbackRanges.length}`);
bookUpload.js:320: console.log('🔧 Attempting range alignment from fallback source...');
bookUpload.js:324: console.log(`📊 Character difference: ${textDiff}`);
bookUpload.js:328: console.log('🎯 Small text difference - using intelligent alignment');
bookUpload.js:382: console.log(`📊 Added ${alignedRanges.length} aligned ranges from fallback`);
bookUpload.js:396: console.log(`📊 Merged result: ${mergedRanges.length} total formatting ranges`);
bookUpload.js:433: console.error('❌ Backend response error occurred');
bookUpload.js:450: console.error('❌ Backend DOCX processing error:', error);
bookUpload.js:481: console.error('File upload error:', error);
bookUpload.js:525: console.log('📄 Processing DOCX file with hybrid approach');
bookUpload.js:531: console.log(`✅ DOCX processed: ${text.length} chars, ${formattingData.ranges.length} formatting ranges`);
bookUpload.js:535: console.log('📄 Processing TXT file');
bookUpload.js:544: console.log('✅ Credit check passed, sending TXT file to backend...');
bookUpload.js:546: console.log('✅ Backend TXT processing completed:', result);
bookUpload.js:561: console.log('🔄 processTextFile called');
bookUpload.js:566: console.log('📡 Sending TXT file to backend: /api/upload/txt');
bookUpload.js:572: console.log('📡 Backend response status:', response.status);
bookUpload.js:575: console.error('❌ Backend response error:', errorData);
bookUpload.js:581: console.log('📡 Backend response received successfully');
bookUpload.js:587: console.log('✅ TXT file processed successfully by backend');
bookUpload.js:594: console.error('❌ Backend text processing error:', error);
bookUpload.js:618: console.log('Book upload module initialized');
bookUpload.js:90: console.error('Error setting file type:', error);
commentsSystem.js:103: console.log('Showing comment popup');
commentsSystem.js:123: console.log(`Comment resolved: ${commentId}`);
commentsSystem.js:125: console.warn(`Failed to resolve comment: ${commentId}`);
commentsSystem.js:156: console.log('Comments system initialized');
commentsSystem.js:184: console.log(`Comment deleted: ${commentId}`);
commentsSystem.js:37: console.log(`Comment added at position ${position}: "${text}"`);
commentsSystem.js:72: console.warn(`Comment not found: ${commentId}`);
docxProcessor.js:119: console.log('✅ Mammoth.js conversion completed');
docxProcessor.js:120: console.log(`📊 Conversion messages: ${result.messages.length}`);
docxProcessor.js:125: console.log(`📋 Conversion completed with ${result.messages.length} messages`);
docxProcessor.js:143: console.error('❌ Rich DOCX processing failed:', error);
docxProcessor.js:161: console.log('📄 Extracting raw text with mammoth.js...');
docxProcessor.js:176: console.error('❌ Raw text extraction failed:', error);
docxProcessor.js:36: console.log('✅ Mammoth.js loaded successfully');
docxProcessor.js:59: console.log('📄 Starting rich DOCX processing with mammoth.js...');
editMode.js:200: console.error('Required elements for edit mode toggle not found');
editMode.js:204: console.log('Toggling edit mode. Current state:', isEditMode ? 'EDIT' : 'VIEW');
editMode.js:234: console.log('✅ Original formatting data restored when discarding changes');
editMode.js:239: console.log('✅ Original formatting applied to DOM after discard');
editMode.js:243: console.log('✅ Formatting data cleared when discarding changes (no original data)');
editMode.js:246: console.error('Error restoring original formatting data:', error);
editMode.js:262: console.log(`Edit mode: ${isEditMode ? 'ON' : 'OFF'}`);
editMode.js:281: console.log('✅ Original formatting data stored');
editMode.js:283: console.error('Error storing original formatting data:', error);
editMode.js:315: console.log('📝 Entering TXT edit mode');
editMode.js:321: console.log('✅ TXT formatting toolbar shown');
editMode.js:327: console.log('✅ TXT formatting shortcuts initialized');
editMode.js:332: console.error('❌ Error initializing TXT edit mode:', error);
editMode.js:340: console.log('📝 Entering DOCX edit mode');
editMode.js:346: console.log('✅ DOCX formatting toolbar shown');
editMode.js:351: console.log('✅ DOCX formatting applied to DOM');
editMode.js:357: console.log('✅ DOCX formatting shortcuts initialized');
editMode.js:367: console.log('🔍 DOCX DEBUGGING: Book content classes:', bookContent.className);
editMode.js:368: console.log('🔍 DOCX DEBUGGING: Formatting elements in DOM:', bookContent.querySelectorAll('[data-formatting-id]').length);
editMode.js:372: console.error('❌ Error initializing DOCX edit mode:', error);
editMode.js:396: console.error('Error hiding formatting toolbar:', error);
editMode.js:428: console.log('Input event triggered, edit mode:', isEditMode);
editMode.js:438: console.log('Paste event triggered, edit mode:', isEditMode);
editMode.js:448: console.log('Drop event triggered, edit mode:', isEditMode);
editMode.js:458: console.log('Keydown event triggered, edit mode:', isEditMode, 'key:', e.key);
editMode.js:484: console.log('Edit protection system initialized with edit mode:', isEditMode);
editMode.js:495: console.warn('Edit mode UI elements not found');
editMode.js:511: console.log('Edit mode UI updated, current mode:', isEditMode ? 'EDIT' : 'VIEW');
editMode.js:528: console.log('Edit protection applied');
editMode.js:542: console.log('Edit protection removed');
editMode.js:547: console.log('Refreshing edit mode state...');
editMode.js:556: console.log('Edit mode state refreshed. Mode:', isEditMode ? 'EDIT' : 'VIEW', 'Protection active:', isProtectionActive);
editMode.js:571: console.log('🔧 SAVE: Calculated text differences:', textDiffs);
editMode.js:579: console.log('✅ SAVE: Formatting ranges updated for edits');
editMode.js:584: console.log('✅ SAVE: Formatting maintained after save');
editMode.js:588: console.error('❌ SAVE: Error preserving formatting:', error);
editMode.js:597: console.error('❌ SAVE: Fallback also failed:', fallbackError);
editMode.js:610: console.log(`🔍 TEXT DIFF: Original length: ${originalText.length}, Current length: ${currentText.length}`);
editMode.js:685: console.log(`🔍 TEXT DIFF: Found ${diffs.length} differences:`, diffs);
editMode.js:689: console.error('❌ TEXT DIFF: Error calculating differences:', error);
editMode.js:701: console.log('🔍 ===== FORMATTING DEBUG REPORT =====');
editMode.js:705: console.log('❌ No book content element found');
editMode.js:710: console.log('📊 STATE:');
editMode.js:711: console.log('  - Edit mode:', isEditMode);
editMode.js:712: console.log('  - File type:', getCurrentFileType());
editMode.js:714: console.log('  - Current file loaded:', !!getCurrentFileName());
editMode.js:717: console.log('📄 TEXT INFO:');
editMode.js:718: console.log('  - DOM text length:', bookContent.textContent.length);
editMode.js:719: console.log('  - State text length:', bookText?.length || 'N/A');
editMode.js:720: console.log('  - Original content length:', originalContent?.length || 'N/A');
editMode.js:724: console.log('🎨 FORMATTING INFO:');
editMode.js:726: console.log('  - Formatting ranges:', stats.ranges);
editMode.js:727: console.log('  - Comments:', stats.comments);
editMode.js:728: console.log('  - Version:', stats.version);
editMode.js:731: console.log('  - First few ranges:', formattingData.ranges.slice(0, 3));
editMode.js:732: console.log('  - Last few ranges:', formattingData.ranges.slice(-3));
editMode.js:742: console.warn('⚠️ INVALID RANGES DETECTED:', invalidRanges);
editMode.js:744: console.log('✅ All formatting ranges appear valid');
editMode.js:748: console.error('❌ Error accessing formatting state:', error);
editMode.js:752: console.log('🏗️ DOM INFO:');
editMode.js:753: console.log('  - Formatted elements:', bookContent.querySelectorAll('[data-formatting-id]').length);
editMode.js:754: console.log('  - Total child nodes:', bookContent.childNodes.length);
editMode.js:755: console.log('  - Classes:', bookContent.className);
editMode.js:757: console.log('🔍 ===== DEBUG REPORT COMPLETE =====');
envManager.js:106: console.warn('🔄 Using fallback environment configuration');
envManager.js:132: console.warn('⚠️ Environment manager not initialized, returning fallback');
envManager.js:187: console.log('🎯 Environment settings applied successfully');
envManager.js:222: console.log('🧪 Testing mode settings applied');
envManager.js:34: console.log(`🔧 Loading environment configuration (attempt ${attempt}/${maxRetries})...`);
envManager.js:44: console.warn('⚠️ /debug/config route not available, using fallback immediately');
envManager.js:61: console.log('✅ Environment configuration loaded successfully');
envManager.js:66: console.warn(`⚠️ Environment config load attempt ${attempt} failed:`, error.message || error);
envManager.js:69: console.warn('❌ Failed to load environment config, using fallback');
envManager.js:81: console.warn('🔄 Using fallback configuration due to repeated failures');
export.js:271: console.error('Export failed:', error);
export.js:325: console.error('Import failed:', error);
formattingRenderer.js:10: console.warn('Book content element not found');
formattingRenderer.js:1005: console.log('✅ DOCX formatting reapplied successfully');
formattingRenderer.js:1007: console.error('❌ Error reapplying formatting:', error);
formattingRenderer.js:1016: console.log('🧪 TESTING DOCX FIX...');
formattingRenderer.js:1020: console.log('❌ No book content found');
formattingRenderer.js:1024: console.log('1. Running initial diagnostics...');
formattingRenderer.js:1027: console.log('2. Applying fix...');
formattingRenderer.js:1030: console.log('3. Comparing results...');
formattingRenderer.js:1031: console.log(`📊 Text nodes: ${beforeStats.textNodes} → ${afterStats.textNodes}`);
formattingRenderer.js:1032: console.log(`📊 Empty nodes: ${beforeStats.emptyNodes} → ${afterStats.emptyNodes}`);
formattingRenderer.js:1033: console.log(`📊 Tiny nodes: ${beforeStats.tinyNodes} → ${afterStats.tinyNodes}`);
formattingRenderer.js:1034: console.log(`📊 Formatting elements: ${beforeStats.formattingElements} → ${afterStats.formattingElements}`);
formattingRenderer.js:1038: console.log(`✅ Reduced fragmentation by ${improvement} text nodes!`);
formattingRenderer.js:1040: console.log(`⚠️ No fragmentation improvement detected`);
formattingRenderer.js:1043: console.log('✅ Test complete!');
formattingRenderer.js:116: console.error("🎨 FORMATTING: No valid text source available, cannot render.");
formattingRenderer.js:120: console.log(`🎨 FORMATTING: Using text source - State: ${stateText?.length || 'N/A'}, DOM: ${domText.length}, Selected: ${text.length}`);
formattingRenderer.js:14: console.log('🎨 FORMATTING: Starting enhanced DOM formatting application...');
formattingRenderer.js:15: console.log('🎨 FORMATTING: Book content text length:', bookContent.textContent.length);
formattingRenderer.js:16: console.log('🎨 FORMATTING: Number of formatting ranges:', formattingData.ranges.length);
formattingRenderer.js:220: console.log(`🔧 LIST ITEM: Cleaned "${segmentText}" -> "${cleanText}"`);
formattingRenderer.js:228: console.log(`🔧 LIST ITEM: Empty after cleaning, using original: "${segmentText}"`);
formattingRenderer.js:312: console.log(`🔧 DOCX FORMATTING: Mapped ${ranges.length} ranges into ${segments.length} total segments.`);
formattingRenderer.js:319: console.warn('🔧 DOCX FORMATTING: No container provided');
formattingRenderer.js:330: console.log(`🔧 DOCX FORMATTING: Finding nodes for positions ${safeStartPos}-${safeEndPos} (max: ${maxPos})`);
formattingRenderer.js:365: console.log(`🔧 DOCX FORMATTING: Found start node at offset ${startOffset}`);
formattingRenderer.js:372: console.log(`🔧 DOCX FORMATTING: Found end node at offset ${endOffset}`);
formattingRenderer.js:38: console.log(`🎨 FORMATTING: Applied ${formattingData.ranges.length} formatting ranges and ${formattingData.comments.length} comments`);
formattingRenderer.js:397: console.log('🔧 DOCX FORMATTING: Using fallback text node detection');
formattingRenderer.js:46: console.log('🔧 DOCX FORMATTING: Preparing optimized DOM for DOCX import...');
formattingRenderer.js:522: console.log('🔧 DOCX FORMATTING: Running post-application validation...');
formattingRenderer.js:541: console.warn('🔧 DOCX FORMATTING: Validation issues found:', issues);
formattingRenderer.js:543: console.log('✅ DOCX FORMATTING: Validation passed - all formatting elements are valid');
formattingRenderer.js:547: console.log(`📊 DOCX FORMATTING: Final stats - ${formattingElements.length} formatted elements, ${bookContent.textContent.length} total characters`);
formattingRenderer.js:596: console.warn('Error getting cursor position:', error);
formattingRenderer.js:616: console.warn('Error setting cursor position:', error);
formattingRenderer.js:632: console.warn('Failed to apply comment:', comment, error);
formattingRenderer.js:64: console.log(`🔧 DOCX FORMATTING: Created ${textChunks.length} optimized text chunks, total length: ${textContent.length}`);
formattingRenderer.js:667: console.warn('Error applying comment indicator:', error);
formattingRenderer.js:707: console.log('IMPROVED Position calculation:', {
formattingRenderer.js:716: console.warn('Error calculating text position:', error);
formattingRenderer.js:732: console.warn('Invalid formatting range detected:', range);
formattingRenderer.js:740: console.warn('Invalid comment position detected:', comment);
formattingRenderer.js:778: console.log('Current DOM formatting state:', {
formattingRenderer.js:794: console.log('🧪 TESTING NESTED FORMATTING FIXES:');
formattingRenderer.js:798: console.log('❌ Book content not found');
formattingRenderer.js:827: console.log(`✅ Found text node inside formatting (parent: ${parent.className})`);
formattingRenderer.js:831: console.log(`📊 Text nodes found: ${textNodesFound}, Inside formatting: ${textNodesInFormatting}`);
formattingRenderer.js:834: console.log('✅ Nested formatting fix is working - can find text nodes inside formatted elements');
formattingRenderer.js:837: console.log('⚠️ No formatted text found to test nested formatting');
formattingRenderer.js:844: console.log('\n🔍 === DOCX IMPORT DIAGNOSTICS ===\n');
formattingRenderer.js:848: console.log('❌ No book content element found');
formattingRenderer.js:853: console.log('📋 1. DOM STATE ANALYSIS:');
formattingRenderer.js:855: console.log(`   📝 Total text length: ${totalText.length}`);
formattingRenderer.js:869: console.log(`   🔗 Text nodes count: ${textNodes.length}`);
formattingRenderer.js:875: console.log(`   ⚠️  Empty nodes: ${emptyNodes.length}`);
formattingRenderer.js:876: console.log(`   ⚠️  Tiny nodes (<5 chars): ${tinyNodes.length}`);
formattingRenderer.js:879: console.log('   🔍 Sample tiny nodes:');
formattingRenderer.js:882: console.log(`      ${i+1}. Text node (${node.textContent.length} chars)`);
formattingRenderer.js:887: console.log('\n📋 2. FORMATTING DATA ANALYSIS:');
formattingRenderer.js:889: console.log('   ❌ No formatting data found');
formattingRenderer.js:893: console.log(`   📊 Total formatting ranges: ${formattingData.ranges.length}`);
formattingRenderer.js:899: console.log(`   ⚠️  Out-of-bounds ranges: ${outOfBounds.length}`);
formattingRenderer.js:902: console.log('   🔍 Out-of-bounds range details:');
formattingRenderer.js:904: console.log(`      ${i+1}. ${range.start}-${range.end} (${range.type}) - Text length: ${totalText.length}`);
formattingRenderer.js:918: console.log(`   🔗 Overlapping ranges: ${overlapping.length}`);
formattingRenderer.js:921: console.log('\n📋 3. POSITION MAPPING TEST:');
formattingRenderer.js:927: console.log(`   ${success ? '✅' : '❌'} Position ${pos}: ${success ? 'Found' : 'Failed'}`);
formattingRenderer.js:929: console.log(`      📍 Attempted range: ${pos}-${pos + 1}, Text length: ${totalText.length}`);
formattingRenderer.js:934: console.log('\n📋 4. CSS/STYLING CHECK:');
formattingRenderer.js:936: console.log(`   🎨 Applied formatting elements: ${formattingElements.length}`);
formattingRenderer.js:942: console.log(`   📝 Unique CSS classes: ${cssClasses.size}`);
formattingRenderer.js:943: console.log(`   🔍 Classes found: ${Array.from(cssClasses).join(', ')}`);
formattingRenderer.js:946: console.log('\n📋 5. PERFORMANCE METRICS:');
formattingRenderer.js:948: console.log(`   📊 Total DOM elements: ${allElements.length}`);
formattingRenderer.js:949: console.log(`   📊 Text nodes to elements ratio: ${(textNodes.length / Math.max(allElements.length, 1)).toFixed(2)}`);
formattingRenderer.js:953: console.log(`   📊 DOM complexity score: ${complexityScore.toFixed(1)} ${complexityScore > 100 ? '(HIGH)' : complexityScore > 50 ? '(MEDIUM)' : '(LOW)'}`);
formattingRenderer.js:956: console.log('\n📋 6. RECOMMENDATIONS:');
formattingRenderer.js:958: console.log('   💡 Clean up empty text nodes');
formattingRenderer.js:961: console.log('   💡 DOM is heavily fragmented - consider rebuilding');
formattingRenderer.js:964: console.log('   💡 Fix out-of-bounds formatting ranges in backend');
formattingRenderer.js:967: console.log('   💡 High overlap complexity - consider range grouping optimization');
formattingRenderer.js:970: console.log('   💡 High DOM complexity - may cause performance issues');
formattingRenderer.js:973: console.log('\n🔍 === DIAGNOSTICS COMPLETE ===\n');
formattingRenderer.js:990: console.log('🔧 FIXING COMMON DOCX IMPORT ISSUES...');
formattingState.js:102: console.log(`🎨 FORMATTING STATE: Removed formatting range ${id} (${removedRange.type})`);
formattingState.js:105: console.warn(`🎨 FORMATTING STATE: Range ${id} not found for removal`);
formattingState.js:123: console.warn('Invalid comment parameters:', { position, text });
formattingState.js:129: console.log(`Added comment at position ${position}`);
formattingState.js:138: console.log(`Removed comment: ${id}`);
formattingState.js:147: console.log(`Resolved comment: ${id}`);
formattingState.js:157: console.log(`Updating formatting positions: insert at ${insertPosition}, net change: ${netChange}`);
formattingState.js:188: console.log(`Updated ${formattingData.ranges.length} ranges and ${formattingData.comments.length} comments`);
formattingState.js:203: console.log(`Cleaned up ${cleaned} invalid formatting ranges`);
formattingState.js:215: console.log(`Cleared ${rangeCount} formatting ranges and ${commentCount} comments`);
formattingState.js:221: console.warn('Invalid formatting data provided');
formattingState.js:236: console.log(`Loaded formatting data: ${formattingData.ranges.length} ranges, ${formattingData.comments.length} comments`);
formattingState.js:251: console.log('Current formatting state:', {
formattingState.js:260: console.log('🔍 ===== FORMATTING SYSTEM DIAGNOSTICS =====');
formattingState.js:263: console.log('🔍 1. CSS LOADING CHECK:');
formattingState.js:271: console.log('   - CSS background color:', computedStyle.backgroundColor);
formattingState.js:272: console.log('   - CSS font weight:', computedStyle.fontWeight);
formattingState.js:273: console.log('   - CSS border:', computedStyle.border);
formattingState.js:277: console.log('🔍 2. DOM STRUCTURE CHECK:');
formattingState.js:280: console.log('   - Book content element found:', true);
formattingState.js:281: console.log('   - Book content classes:', bookContent.className);
formattingState.js:282: console.log('   - Book content text length:', bookContent.textContent.length);
formattingState.js:283: console.log('   - Book content innerHTML length:', bookContent.innerHTML.length);
formattingState.js:284: console.log('   - Section highlights:', bookContent.querySelectorAll('.section-highlight').length);
formattingState.js:285: console.log('   - Formatting elements:', bookContent.querySelectorAll('[data-formatting-id]').length);
formattingState.js:287: console.log('   - Book content element found:', false);
formattingState.js:291: console.log('🔍 3. FORMATTING STATE CHECK:');
formattingState.js:292: console.log('   - Number of ranges:', formattingData.ranges.length);
formattingState.js:293: console.log('   - Number of comments:', formattingData.comments.length);
formattingState.js:295: console.log('   - Formatting ranges initialized:', formattingData.ranges.length > 0);
formattingState.js:298: console.log('🔍 4. EDIT MODE CHECK:');
formattingState.js:300: console.log('   - Edit mode active:', getEditMode());
formattingState.js:302: console.log('   - Could not check edit mode:', error);
formattingState.js:306: console.log('🔍 5. TOOLBAR CHECK:');
formattingState.js:308: console.log('   - Toolbar element found:', !!toolbar);
formattingState.js:310: console.log('   - Toolbar visible:', toolbar.style.display !== 'none');
formattingState.js:311: console.log('   - Toolbar parent:', toolbar.parentNode ? toolbar.parentNode.tagName : 'none');
formattingState.js:315: console.log('🔍 6. FORMATTING APPLICATION TEST:');
formattingState.js:319: console.log('   - Test range created:', !!testRange);
formattingState.js:324: console.log('   - Applying test formatting...');
formattingState.js:329: console.log('   - Test formatting elements created:', testElements.length);
formattingState.js:334: console.log('   - Test element styles:', {
formattingState.js:343: console.log('   - Test range cleaned up');
formattingState.js:346: console.log('   - Error applying test formatting:', error);
formattingState.js:350: console.log('   - Cannot test: no book content or too short');
formattingState.js:353: console.log('🔍 ===== DIAGNOSTICS COMPLETE =====');
formattingState.js:358: console.log('🧪 ===== FORMATTING SYSTEM TEST =====');
formattingState.js:365: console.log('✅ Test range added:', testRange);
formattingState.js:369: console.log('✅ Formats at position 10:', formatsAt10);
formattingState.js:374: console.log('✅ Test range removed:', removed);
formattingState.js:378: console.log('✅ Final formatting data:', formattingData);
formattingState.js:379: console.log('✅ Final stats:', getFormattingStats());
formattingState.js:381: console.log('🧪 ===== TEST COMPLETE =====');
formattingState.js:389: console.log(`🔧 Updating formatting for text change. New length: ${newLength}`);
formattingState.js:394: console.log(`⚠️ Removing range beyond text: ${range.start}-${range.end} (text length: ${newLength})`);
formattingState.js:403: console.log(`🔧 Adjusting range end: ${range.start}-${range.end} -> ${range.start}-${newLength}`);
formattingState.js:419: console.log(`✅ Formatting updated: ${originalCount} -> ${formattingData.ranges.length} ranges`);
formattingState.js:424: console.log(`⚠️ Removing comment beyond text: position ${comment.position} (text length: ${newLength})`);
formattingState.js:433: console.log(`✅ Comments updated: ${originalCommentCount} -> ${formattingData.comments.length} comments`);
formattingState.js:439: console.log('🔧 No text diffs provided, using fallback text length adjustment');
formattingState.js:444: console.log(`🔧 FORMATTING: Updating positions for ${textDiffs.length} text differences`);
formattingState.js:454: console.log(`🔧 FORMATTING: Processing ${diff.type} at position ${diff.position}`);
formattingState.js:479: console.log(`✅ FORMATTING: Updated ranges for ${sortedDiffs.length} edits, cumulative offset: ${cumulativeOffset}`);
formattingState.js:484: console.log(`🔧 FORMATTING: Updating ranges for insertion at ${insertPosition}, length ${insertLength}`);
formattingState.js:489: console.log(`📍 Shifting range start: ${range.start} -> ${range.start + insertLength}`);
formattingState.js:499: console.log(`📍 Extending range end: ${range.end} -> ${range.end + insertLength}`);
formattingState.js:52: console.warn('Invalid formatting range parameters:', { start, end, type });
formattingState.js:528: console.log(`🔧 FORMATTING: Updating ranges for deletion at ${deletePosition}, length ${deleteLength}`);
formattingState.js:536: console.log(`🗑️ Removing range completely within deletion: ${range.start}-${range.end}`);
formattingState.js:542: console.log(`📍 Adjusting range start after deletion: ${range.start} -> ${deletePosition}`);
formattingState.js:552: console.log(`📍 Adjusting range end before deletion: ${range.end} -> ${deletePosition}`);
formattingState.js:561: console.log(`📍 Adjusting range spanning deletion: ${range.end} -> ${range.end - deleteLength}`);
formattingState.js:570: console.log(`📍 Shifting range backward: ${range.start}-${range.end} -> ${range.start - deleteLength}-${range.end - deleteLength}`);
formattingState.js:618: console.log('📋 No formatting data available for TOC extraction');
formattingState.js:626: console.log('📋 No book content available for TOC extraction');
formattingState.js:649: console.log(`📋 Extracted ${headers.length} headers for table of contents`);
formattingState.js:89: console.log(`Added formatting range: ${type} at ${start}-${end}`);
formattingState.js:95: console.warn('🎨 FORMATTING STATE: formattingData not initialized');
formattingToolbar.js:184: console.log('Not showing formatting toolbar - not in edit mode');
formattingToolbar.js:198: console.warn('Book content not found - cannot show toolbar');
formattingToolbar.js:206: console.warn('Column content container not found - cannot show toolbar');
formattingToolbar.js:222: console.log('Formatting toolbar shown');
formattingToolbar.js:229: console.log('Formatting toolbar hidden');
formattingToolbar.js:256: console.log('🔧 FORMATTING TOOLBAR: No text selected for clearing formatting');
formattingToolbar.js:26: console.error('Error loading comments system:', error);
formattingToolbar.js:264: console.log('🔧 FORMATTING TOOLBAR: No text selected for clearing formatting');
formattingToolbar.js:270: console.error('Book content element not found');
formattingToolbar.js:284: console.log(`🔧 FORMATTING TOOLBAR: Found ${overlappingHeadings.length} heading formats to remove`);
formattingToolbar.js:288: console.log(`🔧 FORMATTING TOOLBAR: Removing ${range.type} formatting`);
formattingToolbar.js:311: console.log('🔧 FORMATTING TOOLBAR: Selection preserved after clearing formatting');
formattingToolbar.js:314: console.error('🔧 FORMATTING TOOLBAR: Error preserving selection after clearing:', error);
formattingToolbar.js:318: console.log('🔧 FORMATTING TOOLBAR: No heading formatting found to clear');
formattingToolbar.js:328: console.log('🎯 HEADING SELECTION: Format selected:', format);
formattingToolbar.js:331: console.log('🔧 FORMATTING TOOLBAR: Normal text selected - clearing heading formatting');
formattingToolbar.js:335: console.log('🎯 HEADING SELECTION: Applying format:', format, 'with level:', level);
formattingToolbar.js:353: console.warn('Error calculating text position:', error);
formattingToolbar.js:403: console.log(`🔧 FORMATTING TOOLBAR: Starting formatting application...`);
formattingToolbar.js:404: console.log(`🔧 FORMATTING TOOLBAR: Type: ${type} Level: ${level}`);
formattingToolbar.js:405: console.log(`🔧 FORMATTING TOOLBAR: File type: ${isDocxFile() ? 'DOCX' : 'TXT'}`);
formattingToolbar.js:409: console.log('🔧 FORMATTING TOOLBAR: No text selected for formatting');
formattingToolbar.js:417: console.log('🔧 FORMATTING TOOLBAR: No text selected for formatting');
formattingToolbar.js:421: console.log(`🔧 FORMATTING TOOLBAR: Selected text: "${selectedText}"`);
formattingToolbar.js:422: console.log(`🔧 FORMATTING TOOLBAR: Selected text length: ${selectedText.length}`);
formattingToolbar.js:426: console.error('Book content element not found');
formattingToolbar.js:432: console.log('Selection not in book content area');
formattingToolbar.js:436: console.log('🔧 FORMATTING TOOLBAR: Book content container found');
formattingToolbar.js:438: console.log('🔧 FORMATTING TOOLBAR: Range start container type:', range.startContainer.nodeType);
formattingToolbar.js:439: console.log('🔧 FORMATTING TOOLBAR: Range end container type:', range.endContainer.nodeType);
formattingToolbar.js:447: console.warn('Invalid text positions calculated:', { startPos, endPos });
formattingToolbar.js:456: console.log(`🔧 FORMATTING TOOLBAR: Found ${overlappingRanges.length} overlapping ranges`);
formattingToolbar.js:461: console.log(`🔧 FORMATTING TOOLBAR: Removing existing ${type} formatting`);
formattingToolbar.js:482: console.log('🔧 FORMATTING TOOLBAR: Selection preserved after removing formatting');
formattingToolbar.js:485: console.error('🔧 FORMATTING TOOLBAR: Error preserving selection after removal:', error);
formattingToolbar.js:496: console.log(`🔧 FORMATTING TOOLBAR: Removing existing heading ${range.type} to apply new heading ${type}`);
formattingToolbar.js:505: console.log(`🔧 FORMATTING TOOLBAR: Applying ${type} formatting at positions ${startPos}-${endPos}`);
formattingToolbar.js:506: console.log('🔧 FORMATTING TOOLBAR: Total book content length:', bookContent.textContent.length);
formattingToolbar.js:512: console.log('🔧 FORMATTING TOOLBAR: Formatting range created:', formattingRange);
formattingToolbar.js:522: console.log('🔧 FORMATTING TOOLBAR: About to apply formatting to DOM...');
formattingToolbar.js:53: console.log(`Formatting toolbar created for ${isDocxFile() ? 'DOCX' : 'TXT'} file`);
formattingToolbar.js:545: console.log('🔧 FORMATTING TOOLBAR: Selection preserved on formatted element');
formattingToolbar.js:552: console.log('🔧 FORMATTING TOOLBAR: Could not find exact formatted element, trying alternative...');
formattingToolbar.js:568: console.log('🔧 FORMATTING TOOLBAR: Selection restored using position-based approach');
formattingToolbar.js:572: console.warn('🔧 FORMATTING TOOLBAR: Alternative selection restore failed:', error);
formattingToolbar.js:577: console.log('🔧 FORMATTING TOOLBAR: Could not restore selection - keeping it cleared');
formattingToolbar.js:581: console.log('🔧 FORMATTING TOOLBAR: Formatting elements after DOM update:', formattingElements.length);
formattingToolbar.js:586: console.log(`🔧 FORMATTING TOOLBAR: Element ${index} styles:`, {
formattingToolbar.js:596: console.error('🔧 FORMATTING TOOLBAR: Error in selection preservation:', error);
formattingToolbar.js:619: console.error('Error loading comments system:', error);
formattingToolbar.js:629: console.error('🧹 CLEAR FORMATTING: Book content element not found');
formattingToolbar.js:645: console.log(`🧹 CLEAR FORMATTING: Clearing formatting from selected text (positions ${startPos} to ${endPos})`);
formattingToolbar.js:656: console.log(`🧹 CLEAR FORMATTING: Found ${rangesToRemove.length} formatting ranges in selection to remove:`);
formattingToolbar.js:660: console.log(`🧹 CLEAR FORMATTING: No text selected - clearing ALL formatting (${rangesToRemove.length} ranges):`);
formattingToolbar.js:665: console.log(`🧹 CLEAR FORMATTING: - Removing ${r.type} formatting (${r.start}-${r.end})`);
formattingToolbar.js:676: console.log(`🧹 CLEAR FORMATTING: Successfully cleared ${rangesToRemove.length} formatting ranges from selection`);
formattingToolbar.js:693: console.log('🧹 CLEAR FORMATTING: Selection preserved after clearing formatting');
formattingToolbar.js:696: console.error('🧹 CLEAR FORMATTING: Error preserving selection after clearing:', error);
formattingToolbar.js:700: console.log(`🧹 CLEAR FORMATTING: Successfully cleared ALL ${rangesToRemove.length} formatting ranges from entire document`);
formattingToolbar.js:704: console.log('🧹 CLEAR FORMATTING: No formatting found to clear in selected range');
formattingToolbar.js:706: console.log('🧹 CLEAR FORMATTING: No formatting found to clear in entire document');
formattingToolbar.js:767: console.log('Updated dropdown to:', headingFormat || 'normal');
formattingToolbar.js:814: console.log('Formatting keyboard shortcuts initialized');
formattingToolbar.js:827: console.log('Selection tracking initialized');
formattingToolbar.js:847: console.log('Toolbar positioning initialized');
formattingToolbar.js:856: console.log('Formatting toolbar cleaned up');
htmlToFormatting.js:24: console.log('🔄 Converting HTML to internal formatting system...');
htmlToFormatting.js:25: console.log('📋 Input HTML length:', html.length);
htmlToFormatting.js:35: console.log('📋 Raw DOM text length:', rawText.length);
htmlToFormatting.js:44: console.log(`✅ Conversion complete: ${this.textContent.length} chars, ${this.formattingRanges.length} ranges`);
htmlToFormatting.js:45: console.log(`📊 Text length comparison - Raw: ${rawText.length}, Processed: ${this.textContent.length}`);
index.js:111: console.log(`Server running on port ${PORT}`);
landing.js:107: console.log('✅ Auth state recovered from stored tokens');
landing.js:125: console.log('Landing page received auth state change:', isAuthenticated);
landing.js:139: console.log('🔄 Updating landing page for authenticated user');
landing.js:146: console.log('💎 Credit display initialized for authenticated user on landing page');
landing.js:150: console.log('👤 User navigation created after credits display');
landing.js:152: console.error('Failed to initialize credit display:', error);
landing.js:157: console.warn('⚠️ appUI not available, cannot create user navigation');
landing.js:194: console.log('🔄 Updating landing page for unauthenticated user');
landing.js:20: console.log('🚀 Landing page initialized');
landing.js:205: console.log('💎 Credit display removed for unauthenticated user');
landing.js:267: console.log('🔧 Router not found, initializing...');
landing.js:278: console.log(`🔍 Navigation auth check: SessionManager: ${sessionAuth}, AuthModule: ${authModuleAuth}, Final: ${isAuthenticated}`);
landing.js:282: console.log('🚀 Navigating authenticated user to app via router...');
landing.js:287: console.log('🔐 Redirecting to auth page...');
landing.js:291: console.error('❌ Navigation failed, using fallback:', error);
landing.js:310: console.log('🔧 Router not found, initializing...');
landing.js:321: console.log(`🔍 Demo auth check: SessionManager: ${sessionAuth}, AuthModule: ${authModuleAuth}, Final: ${isAuthenticated}`);
landing.js:325: console.log('🚀 Navigating authenticated user to app via router...');
landing.js:330: console.log('🔐 Redirecting to auth page for demo access...');
landing.js:334: console.error('❌ Demo navigation failed, using fallback:', error);
landing.js:359: console.log('🏠 Brand clicked - navigating to app...');
landing.js:362: console.log('🏠 Brand clicked - redirecting to home page...');
landing.js:510: console.warn('⚠️ App window element not found for tilt effect (attempt ' + setupAppWindowTilt.retryCount + '/10)');
landing.js:515: console.warn('⚠️ App window element not found after 10 attempts - skipping tilt effect');
landing.js:591: console.log('✨ App window tilt effect initialized with smooth animation');
landing.js:598: console.log(`🛒 User clicked to purchase credits: ${packageType || 'unspecified'}`);
landing.js:607: console.log('🔒 User not authenticated, redirecting to signup');
landing.js:614: console.log('✅ User authenticated, triggering direct Stripe payment');
landing.js:62: console.log(`📍 Scrolling to section: ${hash}`);
landing.js:635: console.error('❌ Purchase failed');
landing.js:642: console.error('❌ Error processing payment:', error);
landing.js:73: console.log('🧹 Cleaning up landing page listeners');
landing.js:98: console.log(`Initial auth check on landing page. SessionManager: ${sessionAuth}, AuthModule: ${authModuleAuth}, Final: ${isAuthenticated}`);
landingUI.js:452: console.log('Track Event:', eventName, properties);
landingUI.js:457: console.log('Track Page View:', page);
main.js:10: console.log('✅ Using existing auth module from router');
main.js:112: console.error('Error creating chapter:', error);
main.js:120: console.error('Error creating section:', error);
main.js:13: console.error('❌ Auth module not available!');
main.js:169: console.error('Could not load formatting diagnostics:', error);
main.js:175: console.log('🧪 QUICK FORMATTING TEST:');
main.js:179: console.log('   - Not in edit mode. Please enter edit mode first.');
main.js:186: console.log('   - Need more text content to test.');
main.js:201: console.log('   - Text selected:', selection.toString());
main.js:205: console.log('   - You can now click the Bold button to test formatting!');
main.js:206: console.log('   - For nested formatting, apply Bold first, then select the same text and apply Italic');
main.js:220: console.log('🧪 TESTING PERSISTENCE FIXES:');
main.js:221: console.log('1. Apply some formatting');
main.js:222: console.log('2. Exit edit mode and choose "Discard"');
main.js:223: console.log('3. Re-enter edit mode');
main.js:224: console.log('4. Check if formatting is gone (should be!)');
main.js:23: //     console.log('✅ DOM already loaded, initializing immediately...');
main.js:235: console.log(`Highlighting result: ${highlighted}`);
main.js:242: console.warn('Text highlighting failed, but selection tools are still available');
main.js:256: console.log('🚀 Initializing AudioBook Organizer...');
main.js:261: console.log('⏳ Waiting briefly for auth modules to be available...');
main.js:269: console.log('🧪 Testing mode detected - using temp auth manager');
main.js:275: console.log('✅ Testing mode UI initialized');
main.js:277: console.error('❌ Failed to initialize testing mode UI:', error);
main.js:280: console.log('🔑 Normal mode detected - using Supabase auth module');
main.js:283: console.warn('⚠️ No auth module found - proceeding with limited functionality');
main.js:296: console.log('✨ AudioBook Organizer main app initialized successfully');
main.js:3: console.log('🚀 Auth main.js loaded');
main.js:300: console.log('🧹 Cleaning up main application...');
main.js:306: console.log('🔍 Verifying CSS loading...');
main.js:312: console.log('Formatting CSS loaded:', !!formattingStyles);
main.js:324: console.log('Test element styles:', {
main.js:331: console.error('Error testing CSS:', error);
main.js:338: console.log('Book content element:', {
main.js:352: console.log('🧪 Testing formatting styles...');
main.js:356: console.log('❌ No book content found');
main.js:372: console.log(`✅ ${className}:`, {
main.js:382: console.log('🧪 Formatting test complete');
main.js:387: console.log('🌙 DARK MODE DEBUG:');
main.js:393: console.log('   - HTML data-theme attribute:', hasDataTheme);
main.js:394: console.log('   - Theme manager current theme:', currentTheme);
main.js:401: console.log('   - --text-primary:', textPrimary);
main.js:402: console.log('   - --bg-primary:', bgPrimary);
main.js:408: console.log('   - Book content color:', bookStyles.color);
main.js:409: console.log('   - Book content background:', bookStyles.backgroundColor);
main.js:423: console.log('   - Dark mode CSS rules found:', darkModeRules.length);
main.js:426: console.log('   - Sample dark mode rule:', darkModeRules[0].selectorText);
main.js:432: console.log('🧪 Testing dark mode toggle...');
main.js:6: console.log('🔐 Initializing auth page...');
main.js:93: console.log(`[dotenv@${version}][WARN] ${message}`)
main.js:97: console.log(`[dotenv@${version}][DEBUG] ${message}`)
moduleLoader.js:182: console.warn('❌ ES6 import failed, trying script tag fallback:', importError.message);
moduleLoader.js:71: console.log(`🔧 Attempting to load module: ${path}`);
moduleLoader.js:83: console.log(`✅ Successfully loaded module: ${path}`);
moduleLoader.js:88: console.warn(`⚠️ Failed to load module: ${path}`);
profileModal.js:311: console.log('Found credit purchase in transaction history');
profileModal.js:37: console.error('Failed to load profile data:', error);
profileModal.js:474: console.error('Failed to load usage history:', error);
profileModal.js:489: console.error('Failed to load page:', error);
profileModal.js:504: console.error('Failed to apply filter:', error);
profileModal.js:545: console.error('Profile update error:', error);
profileModal.js:587: console.error('Password reset error:', error);
profileModal.js:73: console.error('Error fetching user data:', error);
profileModal.js:92: console.error('Error fetching usage history:', error);
recaptcha.js:129: console.log('ℹ️ reCAPTCHA disabled, returning dummy token');
recaptcha.js:142: console.log(`✅ reCAPTCHA token generated for action: ${action}`);
recaptcha.js:146: console.error('❌ reCAPTCHA execution failed:', error);
recaptcha.js:150: console.error('❌ reCAPTCHA execute error:', error);
recaptcha.js:164: console.error('Failed to get login reCAPTCHA token:', error);
recaptcha.js:177: console.error('Failed to get signup reCAPTCHA token:', error);
recaptcha.js:190: console.error('Failed to get forgot password reCAPTCHA token:', error);
recaptcha.js:209: console.error(`Failed to set reCAPTCHA token in field ${fieldId}:`, error);
recaptcha.js:32: console.log('✅ reCAPTCHA service initialized');
recaptcha.js:34: console.log('ℹ️ reCAPTCHA is disabled');
recaptcha.js:38: console.error('❌ Failed to initialize reCAPTCHA:', error);
router.js:1010: console.log('📱 Loading main application...');
router.js:1022: console.log('✅ Already on app page, skipping HTML injection');
router.js:1047: console.log('🔧 Loading app HTML structure...');
router.js:1052: console.log('✅ App HTML fetched successfully, length:', appHtml.length);
router.js:1061: console.log('✅ App HTML injected, container now has content length:', appContainer.innerHTML.length);
router.js:1068: console.log('✅ Layout classes applied:', document.body.className);
router.js:1073: console.log('🔍 DOM verification:', {
router.js:1083: console.log('🔍 Main container styles:', {
router.js:109: console.log('✅ Environment and configuration initialized');
router.js:1090: console.log('✅ App HTML already loaded, skipping injection');
router.js:1095: console.log('🔧 Auth module not found, initializing authentication...');
router.js:1102: console.log('🔄 Ensuring session recovery before app load...');
router.js:1109: console.log('🔄 Found stored auth but not currently authenticated - forcing session recovery...');
router.js:1113: console.log('✅ Session recovery completed before app load');
router.js:1117: console.log('⚠️ Session recovery failed, proceeding as unauthenticated');
router.js:1120: console.log('✅ Already authenticated, no recovery needed');
router.js:1122: console.log('ℹ️ No stored auth found');
router.js:1130: console.log('✅ App already initialized and user authenticated, reusing existing app state');
router.js:1137: console.log('🔄 Refreshing UI with current auth state');
router.js:1140: console.log('⚠️ Auth state incomplete, forcing UI refresh');
router.js:1149: console.log('📱 App reused successfully - skipping full initialization');
router.js:115: console.log('🚀 Running parallel initialization tasks...');
router.js:1153: console.error('❌ Error refreshing app features:', error);
router.js:1156: console.log('🔄 Falling back to full initialization due to refresh error');
router.js:1159: console.log('⚠️ App was initialized but user is no longer authenticated - full reinit needed');
router.js:1165: console.log('🔧 App not initialized yet, starting initialization...');
router.js:1166: console.log('🔍 Debug: window.isAppInitialized =', window.isAppInitialized);
router.js:1167: console.log('🔍 Debug: window.isFrameworkInitialized =', window.isFrameworkInitialized);
router.js:1168: console.log('🔍 Debug: window.authModule available =', !!window.authModule);
router.js:1169: console.log('🔍 Debug: authentication state =', isAuthenticatedNow);
router.js:1174: console.log('🧪 Testing mode: Waiting for auth status to be properly set...');
router.js:1195: console.log('🧪 Testing mode: Auth status check complete, proceeding with app init');
router.js:1198: console.log('🔧 Starting dynamic import of main.js...');
router.js:1204: console.log(`✅ App module loaded via ${appModule.loadMethod}`);
router.js:1205: console.log('📊 Module loader stats:', moduleLoader.getStats());
router.js:1211: console.log('✅ App initialization complete');
router.js:1213: console.error('❌ Error initializing app:', error);
router.js:1214: console.error('❌ Error details:', {
router.js:1222: console.log('✅ App already initialized, skipping initialization');
router.js:1223: console.log('🔍 Debug: window.isAppInitialized =', window.isAppInitialized);
router.js:1226: console.log('📱 App loaded successfully');
router.js:1229: console.error('Error loading app:', error);
router.js:1240: console.log('🔧 Creating appContainer for auth page transition');
router.js:1268: console.log('🔧 App resources cleaned for auth page, but keeping app initialized');
router.js:1329: console.log('🔐 Auth page loaded successfully');
router.js:1332: console.error('Error loading auth page:', error);
router.js:1343: console.log('🔧 Creating appContainer for password reset page transition');
router.js:139: console.log('✅ Router initialization complete');
router.js:1391: console.error("Auth module not initialized for password recovery page.");
router.js:1395: console.error('Error loading reset password page:', error);
router.js:1407: console.error('Error loading profile page:', error);
router.js:142: console.error('❌ Router initialization failed:', error);
router.js:1420: console.error('No session ID found in URL');
router.js:1427: console.log('⏳ Auth module not available, waiting for initialization...');
router.js:1431: console.log('✅ Auth module is now available');
router.js:1442: console.log('🔍 Auth module state:', {
router.js:1452: console.log('🔧 Creating appContainer for payment success page');
router.js:1494: console.warn('Error getting auth token:', error);
router.js:151: console.log('🔐 Initializing authentication...');
router.js:157: console.log('🧪 Testing mode: Using temporary authentication');
router.js:161: console.log('🔄 Temp auth redirect detected, stopping router init');
router.js:1648: console.error('Error loading payment success page:', error);
router.js:1674: console.log('💳 Loading payment cancelled page...');
router.js:1680: console.log('🔧 Creating appContainer for payment cancelled page');
router.js:169: console.log('🔑 Normal mode: Using Supabase authentication');
router.js:172: console.log('🔧 Initializing auth module...');
router.js:1731: console.error('Error loading payment cancelled page:', error);
router.js:1739: console.log('💳 Loading payment failed page...');
router.js:1745: console.log('🔧 Creating appContainer for payment failed page');
router.js:175: console.log('✅ Auth module initialized and available globally');
router.js:178: console.log('🔧 Initializing session manager...');
router.js:1804: console.error('Error loading payment failed page:', error);
router.js:181: console.log('✅ Session manager initialized and available globally');
router.js:185: console.log('🔄 Attempting session recovery for page refresh...');
router.js:189: console.log('✅ Session recovery completed successfully');
router.js:191: console.log('⚠️ Session recovery failed, proceeding as unauthenticated');
router.js:194: console.log('✅ User already authenticated');
router.js:1957: console.error('Error showing pricing modal:', error);
router.js:196: console.log('ℹ️ No stored auth found, proceeding as unauthenticated');
router.js:1965: console.log('🏠 Navigating to landing page pricing section...');
router.js:1971: console.error('Error navigating to landing pricing:', error);
router.js:1980: console.log('💎 Handling post-payment navigation - refreshing credits...');
router.js:1990: console.log('✅ Credits refreshed after payment success');
router.js:1992: console.warn('⚠️ Failed to refresh credits after payment:', error);
router.js:1997: console.error('Error handling payment success navigation:', error);
router.js:2005: console.log('🔄 Refreshing essential app features...');
router.js:2009: console.log('💎 Refreshing credit display...');
router.js:2018: console.log('✅ Credits refreshed');
router.js:2022: console.log('📂 Checking project restoration needs...');
router.js:2027: console.log('📂 No content detected, attempting project restoration...');
router.js:2031: console.log('✅ Project restored during fast navigation');
router.js:2033: console.log('📭 No project to restore');
router.js:2036: console.log('📝 Content already present, skipping project restoration');
router.js:2038: console.log('👤 User not authenticated, skipping project restoration');
router.js:2042: console.log('💾 Ensuring auto-save is active...');
router.js:2047: console.log('📋 Ensuring Table of Contents is properly initialized...');
router.js:2051: console.log('✅ Table of Contents reinitialized');
router.js:2053: console.warn('⚠️ Table of Contents initialization failed:', error);
router.js:2057: console.log('✅ Essential features refreshed successfully');
router.js:2060: console.error('❌ Error refreshing essential features:', error);
router.js:2070: console.log('🚫 Ignoring popstate event during password recovery initialization');
router.js:2092: console.log(`📊 Navigation tracked: ${path}`);
router.js:211: console.log('🔄 Starting session recovery attempt...');
router.js:2111: console.log(`🧹 Cleaning up resources for route: ${this.previousRoute}`);
router.js:2148: console.log('🧹 Cleaned up payment success page styles');
router.js:215: console.log('🔍 Found stored auth data, attempting recovery...');
router.js:2156: console.log('🧹 Cleaned up payment success page content');
router.js:2166: console.log('🧹 Cleaned up payment result page styles');
router.js:2174: console.log('🧹 Cleaned up payment result page content');
router.js:224: console.log('🔄 Using session manager for recovery...');
router.js:228: console.log('✅ Session manager recovery successful');
router.js:235: console.log('🔄 Checking Supabase session directly...');
router.js:240: console.log('✅ Found valid Supabase session, updating state...');
router.js:246: console.log('✅ Auth module state updated');
router.js:252: console.log('✅ Session manager state updated');
router.js:255: console.log('✅ Session recovery completed successfully');
router.js:258: console.log('🚫 No valid Supabase session found:', error?.message || 'Unknown error');
router.js:265: console.log('🔄 Attempting recovery with stored JWT token...');
router.js:281: console.log('✅ Token verification successful, restoring session');
router.js:297: console.log('✅ Token-based session recovery completed');
router.js:302: console.warn('Token verification failed:', error);
router.js:307: console.log('🔄 Triggering session manager auth check...');
router.js:312: console.log('✅ Session recovery successful via session manager');
router.js:315: console.log('⚠️ Session recovery failed - stored auth may be expired');
router.js:319: console.log('ℹ️ No stored auth data found, proceeding as unauthenticated');
router.js:323: console.warn('⚠️ Session recovery attempt failed:', error);
router.js:333: console.log('🎨 Ensuring layout stability...');
router.js:342: console.log('🔧 Applied single-column layout for local development');
router.js:362: console.log('📡 Event listeners set up');
router.js:370: console.log('⏳ Waiting for auth state to be ready...');
router.js:380: console.log('✅ No stored auth found, proceeding...');
router.js:387: console.log('✅ Already authenticated, proceeding...');
router.js:392: console.log('🔍 Found stored auth, waiting for session recovery...');
router.js:397: console.log('🔄 Auth state change detected:', event.detail?.event, 'isAuth:', isAuth);
router.js:401: console.log('✅ Auth state ready, proceeding...');
router.js:412: console.log('⏰ Auth wait timeout, proceeding anyway...');
router.js:434: console.warn('Error checking Supabase localStorage keys:', error);
router.js:471: console.warn('Router is already loading a page, ignoring request.');
router.js:484: console.warn(`Route not found: ${fullPath} (pathname: ${targetPath})`);
router.js:491: console.log('🔍 Debug: envConfig.testing_mode =', envConfig.testing_mode, 'tempAuthManager.isTestingMode =', tempAuthManager.isTestingMode);
router.js:496: console.log('🧪 Testing mode: Redirecting to temp authentication');
router.js:504: console.log('🧪 Testing mode: Blocking auth page access');
router.js:512: console.log('🧪 Testing mode: Already authenticated, redirecting to app');
router.js:528: console.log('In password recovery mode, blocking access to authenticated route:', targetPath);
router.js:545: console.log('🔄 Google OAuth callback detected, waiting for auth processing...');
router.js:550: console.log('✅ Authentication completed after OAuth processing');
router.js:553: console.warn('⚠️ OAuth processing failed, redirecting to auth');
router.js:559: console.warn(`🔒 Route ${targetPath} requires authentication. Redirecting to login.`);
router.js:572: console.log('👤 User already authenticated, redirecting to app');
router.js:591: console.error('Error handling route:', error);
router.js:633: console.error('Error loading route:', error);
router.js:645: console.log('🔧 Creating appContainer for page transition');
router.js:672: console.log('🔧 App resources cleaned for landing page, but keeping app initialized');
router.js:707: console.error('Error loading landing page:', error);
router.js:715: console.log('🔧 Loading temp auth page...');
router.js:719: console.log('🔧 Creating appContainer for temp auth page transition');
router.js:739: console.log('🔧 Fetching temp-auth.html...');
router.js:743: console.log('🔧 HTML fetched successfully');
router.js:750: console.log('🔧 Parsed document title:', doc.title);
router.js:752: console.log('🔧 Document body content parsed successfully');
router.js:768: console.log('🔧 Temp auth styles injected');
router.js:773: console.log('🔧 Temp-auth body content length:', bodyContent.length);
router.js:775: console.log('🔧 Content extracted successfully');
router.js:779: console.error('❌ ERROR: Extracted content does not contain temp-auth-container!');
router.js:780: console.error('🔧 This suggests wrong HTML file was parsed or extraction failed');
router.js:782: console.error('🔧 Failed to extract content from fetched HTML');
router.js:806: console.log('🔧 Loading screen hidden, temp-auth content should be visible');
router.js:809: console.log('🔧 Loading temp-auth script...');
router.js:814: console.log('🔧 DOM check after injection - tempAuthForm found:', !!tempForm);
router.js:815: console.log('🔧 appContainer innerHTML length:', appContainer.innerHTML.length);
router.js:817: console.log('🔧 appContainer content injected successfully');
router.js:820: console.log('🔧 Injected HTML content length:', appContainer.innerHTML.length);
router.js:821: console.log('🔧 Searching for form elements in injected HTML...');
router.js:822: console.log('🔧 Forms found via querySelectorAll:', appContainer.querySelectorAll('form').length);
router.js:823: console.log('🔧 Elements with tempAuthForm ID:', appContainer.querySelectorAll('#tempAuthForm').length);
router.js:824: console.log('🔧 All elements with IDs containing "temp":', appContainer.querySelectorAll('[id*="temp"]').length);
router.js:828: console.log('🔧 temp-auth-container found:', !!tempAuthContainer);
router.js:830: console.log('🔧 Forms inside temp-auth-container:', tempAuthContainer.querySelectorAll('form').length);
router.js:836: console.log('🔧 Temp-auth script loaded');
router.js:838: console.error('Error loading temp-auth script:', scriptError);
router.js:841: console.log('✅ Temp auth page loaded successfully');
router.js:844: console.error('Error loading temp auth page:', error);
router.js:847: console.log('🔧 Attempting fallback: Creating temp auth form programmatically...');
router.js:853: console.log('🔧 Creating appContainer for temp auth fallback');
router.js:98: console.log('🌐 Starting router initialization...');
router.js:984: console.log('✅ Fallback temp auth form created successfully');
router.js:990: console.log('✅ Fallback temp auth page loaded successfully');
router.js:993: console.error('Error in fallback temp auth creation:', fallbackError);
sections.js:103: console.log('✅ Section created with preserved formatting');
sections.js:106: console.error('Error preserving formatting during section creation:', error);
sections.js:109: console.log('Falling back to plain text section creation');
sections.js:137: console.log(`Smart selection advanced to position ${endPosition}`);
sections.js:168: console.log(`Smart selection advanced to continue from manual selection end at position ${textBeforeEnd}`);
sections.js:201: console.log('Attempting to copy selected text');
sections.js:206: console.log('Using modern clipboard API');
sections.js:210: console.error('Modern clipboard failed:', err);
sections.js:215: console.log('Clipboard API exists but not secure context, trying anyway');
sections.js:219: console.error('Clipboard API failed:', err);
sections.js:22: console.log('Using smart selection data for section creation');
sections.js:224: console.log('Using fallback copy method');
sections.js:256: console.log('Fallback method 1 succeeded');
sections.js:261: console.error('Fallback method 1 failed:', err);
sections.js:284: console.log('Fallback method 2 succeeded');
sections.js:289: console.error('Fallback method 2 failed:', err);
sections.js:31: console.log('Smart selection element found - will preserve its formatting');
sections.js:401: console.warn(`No highlight found for section ID: ${sectionId}`);
sections.js:405: console.log(`Removing highlight for section ID: ${sectionId}`);
sections.js:418: console.log(`Highlight successfully removed for section ID: ${sectionId}`);
sections.js:463: console.log(`✅ Scrolled to section ${sectionId} within content container`);
sections.js:466: console.warn('Column content container not found, using fallback scroll');
sections.js:569: console.error('Audio upload failed:', error);
sections.js:619: console.log('✅ Cleared missing audio reference for section');
sections.js:802: console.warn('Could not find audio controls container for upload feedback');
sections.js:827: console.log('🔄 Upload progress started for file');
sections.js:854: console.log(`🔄 Upload progress [${stage}]: ${message}`);
sections.js:878: console.log('✅ Upload progress feedback removed');
sections.js:881: console.error('Error hiding upload progress:', error);
selectionTools.js:144: console.log(`Manual selection tools positioned at ${left}, ${top}`);
selectionTools.js:32: console.log('Selection tools shown');
selectionTools.js:94: console.log('Selection tools hidden and highlights cleared');
sessionManager.js:151: console.log('🧹 Cleaning up invalid token');
sessionManager.js:164: console.warn('🚫 Invalid JWT format - wrong number of segments');
sessionManager.js:178: console.log('⏳ Auth check already in progress, skipping...');
sessionManager.js:184: console.log('⏳ Auth check too recent, skipping...');
sessionManager.js:192: console.log('🔍 Session Manager: Checking authentication status...');
sessionManager.js:201: console.log('✅ Auth module already has valid session, syncing with session manager');
sessionManager.js:216: console.warn('Error checking auth module state:', error);
sessionManager.js:223: console.log('🔍 Found stored JWT token, attempting verification...');
sessionManager.js:236: console.log('✅ Token verified with backend, restoring session');
sessionManager.js:244: console.log('✅ Auth module state synchronized with verified session');
sessionManager.js:252: console.warn('Backend token verification failed:', error);
sessionManager.js:261: console.log('✅ Found Supabase session on refresh, triggering auth recovery');
sessionManager.js:271: console.log('✅ Auth module state updated from Supabase session');
sessionManager.js:292: console.warn('Error checking Supabase session:', error);
sessionManager.js:300: console.error('Error checking auth status:', error);
sessionManager.js:326: console.log('🔄 Session manager ignoring duplicate auth state change');
sessionManager.js:334: console.log('🔄 Session manager received auth state changed:', isAuthenticated ? 'User authenticated' : 'Signed out');
sessionManager.js:343: console.log('🔑 Password recovery mode active - forcing unauthenticated state');
sessionManager.js:356: console.log('✅ Valid auth token stored');
sessionManager.js:358: console.warn('⚠️ Invalid JWT token received');
sessionManager.js:364: console.log('✅ Password recovery token preserved for password update');
sessionManager.js:371: console.log('🔑 Auth token removed (signed out)');
sessionManager.js:380: console.log('✅ Google OAuth authentication completed');
sessionManager.js:383: console.log(`Session state updated. Auth: ${this.isAuthenticated}, Recovery: ${this.isPasswordRecovery}`);
sessionManager.js:453: console.error('Error in auth listener:', error);
sessionManager.js:46: console.log('🔒 Initializing session manager...');
sessionManager.js:497: console.log(`Password recovery state set to: ${this.isPasswordRecovery}`);
sessionManager.js:511: console.log('🔑 Global password recovery state cleared');
sessionManager.js:530: console.log('🔑 Password recovery mode activated - allowing Supabase recovery session creation');
sessionManager.js:537: console.log('🔑 Global password recovery state activated (prevents cross-tab auto-login)');
sessionManager.js:563: console.log('🔑 Global password recovery state activated', recoveryState);
sessionManager.js:574: console.warn('Failed to parse recovery state:', error);
sessionManager.js:600: console.log(`✅ Ignoring security event "${eventType}" during legitimate password recovery`);
sessionManager.js:614: console.warn('🚨 Security Event:', securityEvent);
sessionManager.js:646: console.log('✅ Skipping security pattern analysis during password recovery');
sessionManager.js:678: console.log('🚫 Ignoring storage event during initialization');
sessionManager.js:683: console.log('🔄 Recovery storage change detected from another tab');
sessionManager.js:689: console.log('🚫 Ignoring storage event from same tab (ID match):', recoveryState.tabId);
sessionManager.js:69: console.log('🔑 Google OAuth callback detected - clearing any orphaned recovery state');
sessionManager.js:695: console.log('🚫 Ignoring storage event - recent write detected');
sessionManager.js:701: console.log('🚫 Ignoring storage event - same reset password page');
sessionManager.js:707: console.log('🔑 Password recovery activated from another tab - preventing auto-login');
sessionManager.js:710: console.log('🔑 Password recovery cleared from another tab');
sessionManager.js:75: console.log('🔑 Password recovery URL detected.');
sessionManager.js:78: console.log('⏳ Waiting for Supabase to process recovery URL and trigger PASSWORD_RECOVERY event...');
sessionManager.js:84: console.log('🚮 Found and cleared expired password recovery state on initialization.');
sessionManager.js:87: console.log('🔑 Adopting active password recovery state from another session.');
sessionManager.js:95: console.log(`✅ Session manager initialized ${this.isPasswordRecovery ? '(Password Recovery Mode)' : ''}`);
smartSelect.js:102: console.log(`Smart Select Debug - userHasManuallyClickedCursor: ${userHasManuallyClickedCursor}, manualCursorPosition: ${manualCursorPosition}`);
smartSelect.js:108: console.log('✓ Using stored manual cursor position:', startPos);
smartSelect.js:116: console.log('✗ No manual cursor detected, using sequential position:', startPos);
smartSelect.js:128: console.log(`Smart Select: Starting at position ${startPos}, target end ${endPos}`);
smartSelect.js:129: console.log(`Using DOM text length: ${actualText.length}, bookText length: ${bookText.length}`);
smartSelect.js:148: console.log(`Found line break at chunk index ${lastLineBreakIndex}, adjusting end to ${endPos}`);
smartSelect.js:150: console.log('No line break found in chunk, keeping full chunk');
smartSelect.js:158: console.log('Final selection:');
smartSelect.js:159: console.log(`- Length: ${finalText.length}`);
smartSelect.js:160: console.log(`- Ends with period: ${finalText.endsWith('.')}`);
smartSelect.js:161: console.log(`- Last char: "${finalText.charAt(finalText.length - 1)}"`);
smartSelect.js:162: console.log(`- Last 10 chars: "${finalText.slice(-10)}"`);
smartSelect.js:229: console.log(`Smart selection position advanced to: ${currentPosition} (manual cursor tracking cleared)`);
smartSelect.js:246: console.log('Smart selection highlights cleared');
smartSelect.js:259: console.log('DOM Selection Debug:');
smartSelect.js:260: console.log(`Target: ${selection.startPosition} to ${selection.endPosition} (${selection.length} chars)`);
smartSelect.js:264: console.log(`Using exact text (${targetText.length} chars)`);
smartSelect.js:265: console.log(`Text ends with: "${targetText.slice(-10)}"`);
smartSelect.js:266: console.log(`Text ends with period: ${targetText.endsWith('.')}`);
smartSelect.js:276: console.log('✓ Found exact text at expected position');
smartSelect.js:304: console.log(`Start node found at DOM pos ${currentPos}, offset ${startOffset}`);
smartSelect.js:317: console.log(`End node found, selecting ${charsSelected} chars total`);
smartSelect.js:333: console.log(`Final DOM selection: ${actualSelectedText.length} chars`);
smartSelect.js:334: console.log(`Final ends with: "${actualSelectedText.slice(-10)}"`);
smartSelect.js:335: console.log(`Final ends with period: ${actualSelectedText.endsWith('.')}`);
smartSelect.js:34: console.log(`Cursor detected at position: ${textToCursor.length}`);
smartSelect.js:37: console.warn('Error getting cursor position:', error);
smartSelect.js:384: console.warn('Could not add visual highlighting:', e);
smartSelect.js:390: console.error('Could not find exact text at expected position');
smartSelect.js:391: console.error(`Expected at ${selection.startPosition}, found at ${foundIndex}`);
smartSelect.js:394: console.error('Error highlighting smart selection:', error);
smartSelect.js:418: console.log(`Found last section ending at position ${positionAfterLastSection}`);
smartSelect.js:448: console.log('Multiple listeners attached to book content for manual cursor detection');
smartSelect.js:450: console.warn('BookContent element not found, cannot attach click listener');
smartSelect.js:457: console.log(`Smart selection initialized to continue from last section at position ${lastSectionEndPosition}`);
smartSelect.js:473: console.log('Edit mode active - skipping smart select cursor tracking');
smartSelect.js:477: console.log('Click detected on book content');
smartSelect.js:485: console.log(`✓ User manually clicked cursor at position ${cursorPosition} - stored for next smart select`);
smartSelect.js:492: console.log(`Cursor position after click (delayed): ${cursorPosition}`);
smartSelect.js:497: console.log(`✓ User manually clicked cursor at position ${cursorPosition} - stored for next smart select`);
smartSelect.js:499: console.log('✗ Could not get cursor position after click - trying fallback method');
smartSelect.js:513: console.log(`✓ Fallback cursor position: ${position}`);
smartSelect.js:515: console.warn('Fallback cursor detection failed:', error);
smartSelect.js:71: console.log(`Cursor position from event: ${position}`);
smartSelect.js:74: console.warn('Error getting cursor position from event:', error);
smartSelect.js:98: console.log(`Smart Select: Using ${maxChars} characters`);
state.js:61: console.log(`📁 File type set to: ${currentFileType}`);
storage.js:156: console.error('Error during merge:', error);
storage.js:177: console.warn('Could not get file type info:', error);
storage.js:290: console.log(`Loaded formatting data: ${projectData.formattingData.ranges?.length || 0} ranges, ${projectData.formattingData.comments?.length || 0} comments`);
storage.js:302: console.log(`📁 File type detected and set during load: ${fileType}`);
storage.js:305: console.error('Error setting file type during load:', error);
storage.js:311: console.log('Applied formatting to loaded project (immediate)');
storage.js:313: console.error('Error applying formatting during load:', error);
storage.js:319: console.log('📁 File type set to TXT (no formatting data)');
storage.js:321: console.error('Error setting file type during load:', error);
storage.js:325: console.log('No formatting data in project file');
storage.js:334: console.log('Project loaded successfully:', {
storage.js:356: console.log(`🔄 Restoring ${highlights.length} highlights asynchronously...`);
storage.js:374: console.error(`✗ Failed to restore highlight ${globalIndex + 1}:`, error);
storage.js:387: console.log(`✅ Highlight restoration complete: ${restoredCount}/${highlights.length} restored`);
storage.js:398: console.log(`Restoring highlight ${index}`);
storage.js:472: console.log(`✓ Successfully restored highlight ${index}`);
storage.js:475: console.warn(`✗ Text mismatch for highlight ${index}:`, {
storage.js:481: console.warn(`✗ Could not create range for highlight ${index}`);
storage.js:485: console.warn(`✗ Text not found for highlight ${index}`);
storage.js:500: console.log('Project load completed - formatting already applied');
storage.js:526: console.log('🔄 Skipping auto-save: No meaningful content to save');
storage.js:538: console.warn('⚠️ Cannot auto-save: User not authenticated');
storage.js:550: console.log('✅ Project auto-saved to database');
storage.js:560: console.warn('⚠️ Auto-save failed:', error.error || 'Unknown error');
storage.js:565: console.error('❌ Auto-save error:', error);
storage.js:582: console.log('✅ Project auto-saved to localStorage (testing mode)');
storage.js:594: console.error('❌ localStorage save error:', error);
storage.js:612: console.log('👤 User not authenticated, skipping auto-restore');
storage.js:625: console.log('📂 Restoring project from database...');
storage.js:633: console.log('✅ Project restored from database:', {
storage.js:640: console.log('📭 No previous project found in database');
storage.js:644: console.log('📭 No previous project found in database');
storage.js:648: console.warn('⚠️ Failed to load project from database:', error.error || 'Unknown error');
storage.js:653: console.error('❌ Auto-restore error:', error);
storage.js:665: console.log('📭 No previous project found in localStorage');
storage.js:673: console.log('📭 No meaningful content in stored project');
storage.js:677: console.log('📂 Restoring project from localStorage...');
storage.js:686: console.log('✅ Project restored from localStorage:', {
storage.js:694: console.error('❌ localStorage restore error:', error);
storage.js:736: console.log('🔄 Auto-save started (30-second intervals + state change triggers)');
storage.js:756: console.log('🛑 Auto-save stopped');
storage.js:781: console.log('🧹 Testing mode data cleared from localStorage');
storage.js:784: console.error('❌ Error clearing testing mode data:', error);
storage.js:795: console.log('🎵 Validating audio files for restored project...');
storage.js:817: console.log('📭 No audio files to validate in restored project');
storage.js:821: console.log(`🔍 Found ${sectionsWithAudio.length} audio files to validate`);
storage.js:832: console.warn(`⚠️ Audio validation timeout for: ${item.audioPath}`);
storage.js:843: console.warn(`❌ Audio file validation failed for: ${item.audioPath}`, error);
storage.js:863: console.warn(`❌ Audio validation error for ${item.audioPath}:`, error);
storage.js:878: console.log(`✅ Audio validation complete: ${validAudio.length} valid, ${invalidAudio.length} invalid`);
storage.js:882: console.warn(`⚠️ ${invalidAudio.length} audio files are no longer accessible`);
storage.js:894: console.warn('⚠️ Marked section as having missing audio');
storage.js:908: console.log(`✅ ${validAudio.length} audio files successfully validated and restored`);
storage.js:91: console.error('Error loading project:', error);
storage.js:912: console.error('❌ Audio validation process failed:', error);
storage.js:97: console.error('Error reading file:', error);
stripe.js:106: console.log('📄 Stripe.js script already exists in DOM, waiting for it...');
stripe.js:125: console.log('✅ Stripe.js loaded dynamically');
stripe.js:153: console.warn('🚫 Stripe payment system is disabled in testing mode');
stripe.js:161: console.error('Failed to load Stripe.js script:', error);
stripe.js:169: console.error('Failed to get Stripe config:', response.error);
stripe.js:178: console.warn('🚫 Stripe payment system is disabled via configuration');
stripe.js:185: console.warn('🚫 Stripe payment system is not properly configured');
stripe.js:194: console.error('No Stripe publishable key provided');
stripe.js:201: console.log('✅ Stripe initialized successfully');
stripe.js:205: console.error('Failed to initialize Stripe:', error);
stripe.js:287: console.error('Failed to get packages:', error);
stripe.js:317: console.log('✅ Checkout session created successfully');
stripe.js:325: console.error('Stripe checkout error:', error);
stripe.js:333: console.error('Purchase failed:', error);
stripe.js:352: console.error('Failed to get checkout session:', error);
stripe.js:370: console.error('Failed to get transactions:', error);
stripe.js:410: console.error('Error handling payment success:', error);
stripe.js:45: console.error('❌ Stripe.js script failed to load from CDN');
stripe.js:49: console.log('⏳ Waiting for Stripe.js to load...');
stripe.js:532: console.error('Failed to load packages:', error);
stripe.js:61: console.log('✅ Stripe.js loaded from existing script');
stripe.js:615: console.error('Failed to create transaction history UI:', error);
stripe.js:646: console.log('✅ stripeService restored to global scope');
stripe.js:660: console.error(`Stripe service or method ${method} not available`);
stripe.js:664: console.error(`Error calling stripe method ${method}:`, error);
stripe.js:674: console.log('🧪 Testing Stripe Service Availability:');
stripe.js:675: console.log('  - Stripe.js global object:', typeof window.Stripe !== 'undefined' ? '✅ Available' : '❌ Not loaded');
stripe.js:676: console.log('  - stripeJsLoaded flag:', window.stripeJsLoaded ? '✅ True' : '❌ False/Undefined');
stripe.js:677: console.log('  - stripeJsLoadError flag:', window.stripeJsLoadError ? '❌ Error detected' : '✅ No error');
stripe.js:678: console.log('  - window.stripeService exists:', !!window.stripeService);
stripe.js:679: console.log('  - stripeService (direct):', typeof stripeService !== 'undefined');
stripe.js:68: console.error('❌ Stripe.js load error detected');
stripe.js:680: console.log('  - safeStripeCall function:', typeof window.safeStripeCall === 'function');
stripe.js:683: console.log('  - isInitialized:', window.stripeService.isInitialized);
stripe.js:684: console.log('  - isAvailable():', window.stripeService.isAvailable());
stripe.js:685: console.log('✅ Stripe service is properly available!');
stripe.js:687: console.error('❌ Stripe service is NOT available globally');
stripe.js:692: console.log('  - Stripe script in DOM:', stripeScript ? '✅ Found' : '❌ Not found');
stripe.js:695: console.log('🔧 Troubleshooting tips:');
stripe.js:696: console.log('  1. Check network connection');
stripe.js:697: console.log('  2. Check if Stripe.js is blocked by ad blockers');
stripe.js:698: console.log('  3. Try refreshing the page');
stripe.js:699: console.log('  4. Check browser console for script loading errors');
stripe.js:700: console.log('  5. Try calling forceLoadStripe() to retry loading');
stripe.js:709: console.log('🔧 Manually forcing Stripe.js load...');
stripe.js:713: console.log('✅ Stripe.js already available');
stripe.js:720: console.log('✅ Stripe.js force loaded successfully');
stripe.js:723: console.error('❌ Cannot access stripeService.loadStripeScriptDynamically');
stripe.js:727: console.error('❌ Force load failed:', error);
stripe.js:75: console.warn('⚠️ Existing Stripe.js script taking too long, trying dynamic load...');
stripe.js:94: console.log('🔄 Attempting to load Stripe.js dynamically...');
tableOfContents.js:146: console.log('✅ TOC elements created dynamically:', {
tableOfContents.js:218: console.log('🔧 toggleTableOfContents called, current state:', tocState.isVisible);
tableOfContents.js:219: console.log('🔧 TOC elements check:', {
tableOfContents.js:228: console.error('❌ TOC sidebar element not found, attempting to recreate...');
tableOfContents.js:231: console.error('❌ Failed to create TOC sidebar element');
tableOfContents.js:239: console.log('🔧 TOC state change:', { from: wasVisible, to: tocState.isVisible });
tableOfContents.js:244: console.log('✅ TOC sidebar class updated:', tocState.elements.sidebar.classList.contains('toc-open'));
tableOfContents.js:248: console.log('🔧 TOC Sidebar position after toggle:', {
tableOfContents.js:270: console.log('✅ TOC toggle completed successfully');
tableOfContents.js:273: console.error('❌ Error in toggleTableOfContents:', error);
tableOfContents.js:288: console.log(`📋 Found ${headers.length} headers in document`);
tableOfContents.js:291: console.error('❌ Failed to extract headers:', error);
tableOfContents.js:301: console.log('📋 No formatting data available');
tableOfContents.js:309: console.log('📋 No book content available');
tableOfContents.js:316: console.log('🔍 DEBUG: formattingData.ranges length:', formattingData.ranges.length);
tableOfContents.js:317: console.log('🔍 DEBUG: headerTypes:', headerTypes);
tableOfContents.js:318: console.log('🔍 DEBUG: First 3 formatting ranges:', formattingData.ranges.slice(0, 3));
tableOfContents.js:321: console.log('🔍 DEBUG: Filtered header ranges count:', filteredRanges.length);
tableOfContents.js:322: console.log('🔍 DEBUG: First 3 filtered ranges:', filteredRanges.slice(0, 3));
tableOfContents.js:34: console.log('🔍 Initializing Table of Contents...');
tableOfContents.js:345: console.log(`🔍 DEBUG: Creating header ${index + 1}:`, {
tableOfContents.js:356: console.log('🔍 DEBUG: First 5 headers extracted:', headers.slice(0, 5).map(h => ({
tableOfContents.js:366: console.log('🔍 DEBUG: Unique positions count:', uniquePositions.size, 'vs total headers:', headers.length);
tableOfContents.js:367: console.log('🔍 DEBUG: Unique texts count:', uniqueTexts.size, 'vs total headers:', headers.length);
tableOfContents.js:46: console.error('❌ Failed to initialize Table of Contents:', error);
tableOfContents.js:508: console.warn(`📋 Header ${headerId} not found`);
tableOfContents.js:513: console.log('📋 Navigating to header');
tableOfContents.js:514: console.log('🔍 Header Details:', {
tableOfContents.js:527: console.log('🔍 Header Element Found:', {
tableOfContents.js:549: console.log('✅ Scrolled content container to header position:', relativeTop);
tableOfContents.js:553: console.log('⚠️ Used fallback scrollIntoView (may move page headers)');
tableOfContents.js:56: console.log('🔍 Starting core TOC initialization...');
tableOfContents.js:566: console.log('✅ Scrolled to header successfully');
tableOfContents.js:568: console.log('❌ No header element found by ID or text');
tableOfContents.js:585: console.error('❌ Failed to navigate to header:', error);
tableOfContents.js:601: console.log('✅ Found header by formatting ID:', headerElement);
tableOfContents.js:605: console.log('❌ No header found by formatting ID:', headerId);
tableOfContents.js:620: console.log('🔍 Header Search by Text:', {
tableOfContents.js:629: console.log('✅ Found exact text match:', header);
tableOfContents.js:638: console.log('✅ Found partial text match:', header);
tableOfContents.js:647: console.log('✅ Found reverse partial match:', header);
tableOfContents.js:652: console.log('❌ No matching header found for text:', headerText);
tableOfContents.js:70: console.log('✅ TOC Core initialization complete:', {
tableOfContents.js:701: console.log('📋 Scroll observer not available or missing containers');
tableOfContents.js:740: console.log('📋 Scroll observer setup with correct scroll container');
tableOfContents.js:747: console.log('🔄 Refreshing Table of Contents...');
tableOfContents.js:755: console.log('✅ Table of Contents refreshed');
tableOfContents.js:758: console.error('❌ Failed to refresh TOC:', error);
tableOfContents.js:766: console.log('🧹 Cleaning up Table of Contents...');
tableOfContents.js:77: console.error('❌ Failed core TOC initialization:', error);
tableOfContents.js:802: console.log('✅ Table of Contents cleanup complete');
temp-auth.js:117: console.log(`🔧 Waiting for temp auth form to be available... (attempt ${retryCount}/${maxRetries})`);
temp-auth.js:120: console.error('❌ Failed to find temp auth form after maximum retries');
temp-auth.js:121: console.error('🔧 Debug info - DOM elements found:');
temp-auth.js:122: console.error('  - appContainer:', document.getElementById('appContainer'));
temp-auth.js:123: console.error('  - Document body innerHTML length:', document.body.innerHTML.length);
temp-auth.js:124: console.error('  - Available forms:', document.querySelectorAll('form'));
temp-auth.js:125: console.error('  - Elements with id containing "temp":', document.querySelectorAll('[id*="temp"]'));
tempAuth.js:182: console.warn('Router not available, using fallback navigation');
tempAuth.js:32: console.log('🔧 TempAuth: Using environment config for testing mode:', envConfig.testing_mode);
temp-auth.js:34: console.log('🔧 Temp auth form detected via MutationObserver');
temp-auth.js:56: console.log('🔧 Attempting to find temp auth form elements...');
tempAuth.js:57: console.log('🔧 TempAuth: No env config provided, checking server for testing mode');
temp-auth.js:59: console.log('🔧 Current DOM state:');
temp-auth.js:60: console.log('  - Document ready state:', document.readyState);
temp-auth.js:61: console.log('  - appContainer exists:', !!document.getElementById('appContainer'));
temp-auth.js:62: console.log('  - appContainer innerHTML length:', document.getElementById('appContainer')?.innerHTML?.length || 0);
temp-auth.js:63: console.log('  - All forms in document:', document.querySelectorAll('form').length);
temp-auth.js:64: console.log('  - Form with tempAuthForm ID:', !!document.getElementById('tempAuthForm'));
temp-auth.js:73: console.log('✅ All temp auth form elements found successfully');
tempAuth.js:76: console.warn('🔧 TempAuth: Server unavailable, using fallback detection');
temp-auth.js:88: console.log('✅ Temp auth form initialized successfully');
temp-auth.js:91: console.log('❌ Temp auth form not found. Elements found:');
temp-auth.js:92: console.log('  - form (tempAuthForm):', !!this.form);
temp-auth.js:93: console.log('  - passwordInput (password):', !!this.passwordInput);
temp-auth.js:94: console.log('  - submitBtn (submitBtn):', !!this.submitBtn);
temp-auth.js:95: console.log('  - errorMessage (errorMessage):', !!this.errorMessage);
temp-auth.js:96: console.log('  - loadingIndicator (loadingIndicator):', !!this.loadingIndicator);
testingModeUI.js:113: console.log('🧪 Adding testing mode logout button...');
testingModeUI.js:118: console.warn('⚠️ Navigation container not found, cannot add logout button');
testingModeUI.js:134: console.warn('⚠️ Exit button not found in HTML structure');
testingModeUI.js:141: console.log(`🧪 Hidden auth element: ${element.className || element.tagName}`);
testingModeUI.js:144: console.log('✅ Testing mode logout button added successfully');
testingModeUI.js:21: console.log('🧪 Initializing testing mode UI...');
testingModeUI.js:255: console.error('❌ tempAuthManager not available or logout method missing');
testingModeUI.js:264: console.error('❌ Error during logout process:', error);
testingModeUI.js:308: console.warn(`⚠️ Element ${selector} not found within ${timeout}ms`);
testingModeUI.js:31: console.log('🧪 Testing mode detected, applying UI changes...');
testingModeUI.js:42: console.log('✅ Testing mode UI applied successfully');
testingModeUI.js:44: console.log('ℹ️ Not in testing mode, skipping UI changes');
testingModeUI.js:50: console.error('❌ Testing mode UI initialization failed:', error);
testingModeUI.js:61: console.log(`🧪 Applying testing mode UI (attempt ${attempt}/${this.maxRetries})`);
testingModeUI.js:85: console.log(`✅ Testing mode UI applied successfully on attempt ${attempt}`);
testingModeUI.js:89: console.warn(`⚠️ Testing mode UI attempt ${attempt} failed:`, error);
testingModeUI.js:92: console.error('❌ All testing mode UI attempts failed');
textSelection.js:14: console.log('Edit mode active - skipping text selection tools');
textSelection.js:35: console.log(`Manual selection: ${text.length} characters`);
textSelection.js:62: console.warn('Book content element not found for text selection initialization');
textSelection.js:71: console.log('Text selection handlers initialized');
textSelection.js:85: console.log('Text selection handlers cleaned up');
themeManager.js:120: console.log(`🎨 Applied ${theme} theme (page: ${this.isAppPage() ? 'app' : this.isLandingPage() ? 'landing' : 'other'})`);
themeManager.js:129: console.log('🎨 Theme toggle blocked - not on app page');
themeManager.js:39: console.log(`🎨 Theme Manager initialized with ${this.currentTheme} preference (current display: ${this.getCurrentDisplayTheme()})`);
ui.js:12: console.warn('⚠️ sectionsList element not found - skipping update');
ui.js:130: console.log('💎 Credits display already exists');
ui.js:134: console.log('💎 Creating credits display...');
ui.js:158: console.log('💎 Credits inserted before existing user navigation');
ui.js:162: console.log('💎 Credits inserted before auth button');
ui.js:166: console.log('💎 Credits appended to end of nav-links');
ui.js:170: console.log('💎 Credits appended to header');
ui.js:173: console.log('💎 Credits HTML inserted into DOM');
ui.js:181: console.log('💎 Credits display created and click handler added');
ui.js:183: console.error('💎 Failed to find credits display after creation');
ui.js:230: console.log('✅ stripeService made globally available');
ui.js:254: console.error('Error loading Stripe payment interface:', error);
ui.js:337: console.log('Modal handlers initialized');
